// csv_service.proto
syntax = "proto3";

package csvservice;

service CsvService {
  // Existing RPCs
  rpc UploadCsv (CsvUploadRequest) returns (CsvUploadResponse);
  rpc ListLoadedFiles (Empty) returns (CsvFileList);
  
  // New RPCs for extended functionality
  rpc ViewFile (ViewFileRequest) returns (ViewFileResponse);
  rpc ComputeSum (ColumnOperationRequest) returns (NumericResponse);
  rpc ComputeAverage (ColumnOperationRequest) returns (NumericResponse);
  rpc InsertRow (InsertRowRequest) returns (ModificationResponse);
  rpc DeleteRow (DeleteRowRequest) returns (ModificationResponse);
  
  // Fault tolerance and cluster management
  rpc GetClusterStatus (Empty) returns (ClusterStatusResponse);
  rpc RegisterPeer (RegisterPeerRequest) returns (RegisterPeerResponse);
  rpc Heartbeat (HeartbeatRequest) returns (HeartbeatResponse);
  
  // Internal RPC used by the leader to replicate an upload to peers
  rpc ReplicateUpload (CsvUploadRequest) returns (ReplicateUploadResponse);
}

// Existing messages
message CsvUploadRequest {
  string filename = 1;
  bytes csv_data = 2;
}

message CsvUploadResponse {
  bool success = 1;
  string message = 2;
  int32 row_count = 3;
  int32 column_count = 4;
}

message CsvFileList {
  repeated string filenames = 1;
}

message Empty {}

// New messages for extended functionality
message ViewFileRequest {
  string filename = 1;
}

message ViewFileResponse {
  bool success = 1;
  string message = 2;
  repeated string column_names = 3;
  repeated Row rows = 4;
}

message Row {
  repeated string values = 1;
}

message ColumnOperationRequest {
  string filename = 1;
  string column_name = 2;
}

message NumericResponse {
  bool success = 1;
  string message = 2;
  double value = 3;
}

message InsertRowRequest {
  string filename = 1;
  repeated string values = 2;
}

message DeleteRowRequest {
  string filename = 1;
  int32 row_index = 2;
}

message ModificationResponse {
  bool success = 1;
  string message = 2;
}

// Fault tolerance and cluster management messages
message ClusterStatusResponse {
  bool success = 1;
  string message = 2;
  string leader_address = 3;
  repeated string server_addresses = 4;
  int32 active_server_count = 5;
}

message RegisterPeerRequest {
  string peer_address = 1;
}

message RegisterPeerResponse {
  bool success = 1;
  string message = 2;
  string leader_address = 3;
}

message HeartbeatRequest {
  string server_address = 1;
  bool is_leader = 2;
}

message HeartbeatResponse {
  bool success = 1;
  string leader_address = 2;
}

// Response message for the internal ReplicateUpload RPC
message ReplicateUploadResponse {
  bool success = 1;
  string message = 2;
}