// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/csv_service.proto
// Original file comments:
// csv_service.proto
#ifndef GRPC_proto_2fcsv_5fservice_2eproto__INCLUDED
#define GRPC_proto_2fcsv_5fservice_2eproto__INCLUDED

#include "proto/csv_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace csvservice {

class CsvService final {
 public:
  static constexpr char const* service_full_name() {
    return "csvservice.CsvService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Existing RPCs
    virtual ::grpc::Status UploadCsv(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest& request, ::csvservice::CsvUploadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::CsvUploadResponse>> AsyncUploadCsv(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::CsvUploadResponse>>(AsyncUploadCsvRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::CsvUploadResponse>> PrepareAsyncUploadCsv(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::CsvUploadResponse>>(PrepareAsyncUploadCsvRaw(context, request, cq));
    }
    virtual ::grpc::Status ListLoadedFiles(::grpc::ClientContext* context, const ::csvservice::Empty& request, ::csvservice::CsvFileList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::CsvFileList>> AsyncListLoadedFiles(::grpc::ClientContext* context, const ::csvservice::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::CsvFileList>>(AsyncListLoadedFilesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::CsvFileList>> PrepareAsyncListLoadedFiles(::grpc::ClientContext* context, const ::csvservice::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::CsvFileList>>(PrepareAsyncListLoadedFilesRaw(context, request, cq));
    }
    // New RPCs for extended functionality
    virtual ::grpc::Status ViewFile(::grpc::ClientContext* context, const ::csvservice::ViewFileRequest& request, ::csvservice::ViewFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ViewFileResponse>> AsyncViewFile(::grpc::ClientContext* context, const ::csvservice::ViewFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ViewFileResponse>>(AsyncViewFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ViewFileResponse>> PrepareAsyncViewFile(::grpc::ClientContext* context, const ::csvservice::ViewFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ViewFileResponse>>(PrepareAsyncViewFileRaw(context, request, cq));
    }
    virtual ::grpc::Status ComputeSum(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest& request, ::csvservice::NumericResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::NumericResponse>> AsyncComputeSum(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::NumericResponse>>(AsyncComputeSumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::NumericResponse>> PrepareAsyncComputeSum(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::NumericResponse>>(PrepareAsyncComputeSumRaw(context, request, cq));
    }
    virtual ::grpc::Status ComputeAverage(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest& request, ::csvservice::NumericResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::NumericResponse>> AsyncComputeAverage(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::NumericResponse>>(AsyncComputeAverageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::NumericResponse>> PrepareAsyncComputeAverage(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::NumericResponse>>(PrepareAsyncComputeAverageRaw(context, request, cq));
    }
    virtual ::grpc::Status InsertRow(::grpc::ClientContext* context, const ::csvservice::InsertRowRequest& request, ::csvservice::ModificationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ModificationResponse>> AsyncInsertRow(::grpc::ClientContext* context, const ::csvservice::InsertRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ModificationResponse>>(AsyncInsertRowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ModificationResponse>> PrepareAsyncInsertRow(::grpc::ClientContext* context, const ::csvservice::InsertRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ModificationResponse>>(PrepareAsyncInsertRowRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteRow(::grpc::ClientContext* context, const ::csvservice::DeleteRowRequest& request, ::csvservice::ModificationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ModificationResponse>> AsyncDeleteRow(::grpc::ClientContext* context, const ::csvservice::DeleteRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ModificationResponse>>(AsyncDeleteRowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ModificationResponse>> PrepareAsyncDeleteRow(::grpc::ClientContext* context, const ::csvservice::DeleteRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ModificationResponse>>(PrepareAsyncDeleteRowRaw(context, request, cq));
    }
    // Fault tolerance and cluster management
    virtual ::grpc::Status GetClusterStatus(::grpc::ClientContext* context, const ::csvservice::Empty& request, ::csvservice::ClusterStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ClusterStatusResponse>> AsyncGetClusterStatus(::grpc::ClientContext* context, const ::csvservice::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ClusterStatusResponse>>(AsyncGetClusterStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ClusterStatusResponse>> PrepareAsyncGetClusterStatus(::grpc::ClientContext* context, const ::csvservice::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ClusterStatusResponse>>(PrepareAsyncGetClusterStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status RegisterPeer(::grpc::ClientContext* context, const ::csvservice::RegisterPeerRequest& request, ::csvservice::RegisterPeerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::RegisterPeerResponse>> AsyncRegisterPeer(::grpc::ClientContext* context, const ::csvservice::RegisterPeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::RegisterPeerResponse>>(AsyncRegisterPeerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::RegisterPeerResponse>> PrepareAsyncRegisterPeer(::grpc::ClientContext* context, const ::csvservice::RegisterPeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::RegisterPeerResponse>>(PrepareAsyncRegisterPeerRaw(context, request, cq));
    }
    virtual ::grpc::Status Heartbeat(::grpc::ClientContext* context, const ::csvservice::HeartbeatRequest& request, ::csvservice::HeartbeatResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::HeartbeatResponse>> AsyncHeartbeat(::grpc::ClientContext* context, const ::csvservice::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::HeartbeatResponse>>(AsyncHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::HeartbeatResponse>> PrepareAsyncHeartbeat(::grpc::ClientContext* context, const ::csvservice::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::HeartbeatResponse>>(PrepareAsyncHeartbeatRaw(context, request, cq));
    }
    // Internal RPC used by the leader to replicate an upload to peers
    virtual ::grpc::Status ReplicateUpload(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest& request, ::csvservice::ReplicateUploadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ReplicateUploadResponse>> AsyncReplicateUpload(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ReplicateUploadResponse>>(AsyncReplicateUploadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ReplicateUploadResponse>> PrepareAsyncReplicateUpload(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ReplicateUploadResponse>>(PrepareAsyncReplicateUploadRaw(context, request, cq));
    }
    // Internal RPC used by the leader to replicate a mutation to peers
    virtual ::grpc::Status ApplyMutation(::grpc::ClientContext* context, const ::csvservice::ReplicateMutationRequest& request, ::csvservice::ReplicateMutationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ReplicateMutationResponse>> AsyncApplyMutation(::grpc::ClientContext* context, const ::csvservice::ReplicateMutationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ReplicateMutationResponse>>(AsyncApplyMutationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ReplicateMutationResponse>> PrepareAsyncApplyMutation(::grpc::ClientContext* context, const ::csvservice::ReplicateMutationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ReplicateMutationResponse>>(PrepareAsyncApplyMutationRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Existing RPCs
      virtual void UploadCsv(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest* request, ::csvservice::CsvUploadResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UploadCsv(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest* request, ::csvservice::CsvUploadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListLoadedFiles(::grpc::ClientContext* context, const ::csvservice::Empty* request, ::csvservice::CsvFileList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListLoadedFiles(::grpc::ClientContext* context, const ::csvservice::Empty* request, ::csvservice::CsvFileList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // New RPCs for extended functionality
      virtual void ViewFile(::grpc::ClientContext* context, const ::csvservice::ViewFileRequest* request, ::csvservice::ViewFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ViewFile(::grpc::ClientContext* context, const ::csvservice::ViewFileRequest* request, ::csvservice::ViewFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ComputeSum(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest* request, ::csvservice::NumericResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ComputeSum(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest* request, ::csvservice::NumericResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ComputeAverage(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest* request, ::csvservice::NumericResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ComputeAverage(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest* request, ::csvservice::NumericResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void InsertRow(::grpc::ClientContext* context, const ::csvservice::InsertRowRequest* request, ::csvservice::ModificationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InsertRow(::grpc::ClientContext* context, const ::csvservice::InsertRowRequest* request, ::csvservice::ModificationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteRow(::grpc::ClientContext* context, const ::csvservice::DeleteRowRequest* request, ::csvservice::ModificationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRow(::grpc::ClientContext* context, const ::csvservice::DeleteRowRequest* request, ::csvservice::ModificationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Fault tolerance and cluster management
      virtual void GetClusterStatus(::grpc::ClientContext* context, const ::csvservice::Empty* request, ::csvservice::ClusterStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetClusterStatus(::grpc::ClientContext* context, const ::csvservice::Empty* request, ::csvservice::ClusterStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RegisterPeer(::grpc::ClientContext* context, const ::csvservice::RegisterPeerRequest* request, ::csvservice::RegisterPeerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterPeer(::grpc::ClientContext* context, const ::csvservice::RegisterPeerRequest* request, ::csvservice::RegisterPeerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Heartbeat(::grpc::ClientContext* context, const ::csvservice::HeartbeatRequest* request, ::csvservice::HeartbeatResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Heartbeat(::grpc::ClientContext* context, const ::csvservice::HeartbeatRequest* request, ::csvservice::HeartbeatResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Internal RPC used by the leader to replicate an upload to peers
      virtual void ReplicateUpload(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest* request, ::csvservice::ReplicateUploadResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReplicateUpload(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest* request, ::csvservice::ReplicateUploadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Internal RPC used by the leader to replicate a mutation to peers
      virtual void ApplyMutation(::grpc::ClientContext* context, const ::csvservice::ReplicateMutationRequest* request, ::csvservice::ReplicateMutationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ApplyMutation(::grpc::ClientContext* context, const ::csvservice::ReplicateMutationRequest* request, ::csvservice::ReplicateMutationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::CsvUploadResponse>* AsyncUploadCsvRaw(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::CsvUploadResponse>* PrepareAsyncUploadCsvRaw(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::CsvFileList>* AsyncListLoadedFilesRaw(::grpc::ClientContext* context, const ::csvservice::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::CsvFileList>* PrepareAsyncListLoadedFilesRaw(::grpc::ClientContext* context, const ::csvservice::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ViewFileResponse>* AsyncViewFileRaw(::grpc::ClientContext* context, const ::csvservice::ViewFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ViewFileResponse>* PrepareAsyncViewFileRaw(::grpc::ClientContext* context, const ::csvservice::ViewFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::NumericResponse>* AsyncComputeSumRaw(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::NumericResponse>* PrepareAsyncComputeSumRaw(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::NumericResponse>* AsyncComputeAverageRaw(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::NumericResponse>* PrepareAsyncComputeAverageRaw(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ModificationResponse>* AsyncInsertRowRaw(::grpc::ClientContext* context, const ::csvservice::InsertRowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ModificationResponse>* PrepareAsyncInsertRowRaw(::grpc::ClientContext* context, const ::csvservice::InsertRowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ModificationResponse>* AsyncDeleteRowRaw(::grpc::ClientContext* context, const ::csvservice::DeleteRowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ModificationResponse>* PrepareAsyncDeleteRowRaw(::grpc::ClientContext* context, const ::csvservice::DeleteRowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ClusterStatusResponse>* AsyncGetClusterStatusRaw(::grpc::ClientContext* context, const ::csvservice::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ClusterStatusResponse>* PrepareAsyncGetClusterStatusRaw(::grpc::ClientContext* context, const ::csvservice::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::RegisterPeerResponse>* AsyncRegisterPeerRaw(::grpc::ClientContext* context, const ::csvservice::RegisterPeerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::RegisterPeerResponse>* PrepareAsyncRegisterPeerRaw(::grpc::ClientContext* context, const ::csvservice::RegisterPeerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::HeartbeatResponse>* AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::csvservice::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::HeartbeatResponse>* PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::csvservice::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ReplicateUploadResponse>* AsyncReplicateUploadRaw(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ReplicateUploadResponse>* PrepareAsyncReplicateUploadRaw(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ReplicateMutationResponse>* AsyncApplyMutationRaw(::grpc::ClientContext* context, const ::csvservice::ReplicateMutationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csvservice::ReplicateMutationResponse>* PrepareAsyncApplyMutationRaw(::grpc::ClientContext* context, const ::csvservice::ReplicateMutationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status UploadCsv(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest& request, ::csvservice::CsvUploadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::CsvUploadResponse>> AsyncUploadCsv(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::CsvUploadResponse>>(AsyncUploadCsvRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::CsvUploadResponse>> PrepareAsyncUploadCsv(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::CsvUploadResponse>>(PrepareAsyncUploadCsvRaw(context, request, cq));
    }
    ::grpc::Status ListLoadedFiles(::grpc::ClientContext* context, const ::csvservice::Empty& request, ::csvservice::CsvFileList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::CsvFileList>> AsyncListLoadedFiles(::grpc::ClientContext* context, const ::csvservice::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::CsvFileList>>(AsyncListLoadedFilesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::CsvFileList>> PrepareAsyncListLoadedFiles(::grpc::ClientContext* context, const ::csvservice::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::CsvFileList>>(PrepareAsyncListLoadedFilesRaw(context, request, cq));
    }
    ::grpc::Status ViewFile(::grpc::ClientContext* context, const ::csvservice::ViewFileRequest& request, ::csvservice::ViewFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::ViewFileResponse>> AsyncViewFile(::grpc::ClientContext* context, const ::csvservice::ViewFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::ViewFileResponse>>(AsyncViewFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::ViewFileResponse>> PrepareAsyncViewFile(::grpc::ClientContext* context, const ::csvservice::ViewFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::ViewFileResponse>>(PrepareAsyncViewFileRaw(context, request, cq));
    }
    ::grpc::Status ComputeSum(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest& request, ::csvservice::NumericResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::NumericResponse>> AsyncComputeSum(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::NumericResponse>>(AsyncComputeSumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::NumericResponse>> PrepareAsyncComputeSum(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::NumericResponse>>(PrepareAsyncComputeSumRaw(context, request, cq));
    }
    ::grpc::Status ComputeAverage(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest& request, ::csvservice::NumericResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::NumericResponse>> AsyncComputeAverage(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::NumericResponse>>(AsyncComputeAverageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::NumericResponse>> PrepareAsyncComputeAverage(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::NumericResponse>>(PrepareAsyncComputeAverageRaw(context, request, cq));
    }
    ::grpc::Status InsertRow(::grpc::ClientContext* context, const ::csvservice::InsertRowRequest& request, ::csvservice::ModificationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::ModificationResponse>> AsyncInsertRow(::grpc::ClientContext* context, const ::csvservice::InsertRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::ModificationResponse>>(AsyncInsertRowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::ModificationResponse>> PrepareAsyncInsertRow(::grpc::ClientContext* context, const ::csvservice::InsertRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::ModificationResponse>>(PrepareAsyncInsertRowRaw(context, request, cq));
    }
    ::grpc::Status DeleteRow(::grpc::ClientContext* context, const ::csvservice::DeleteRowRequest& request, ::csvservice::ModificationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::ModificationResponse>> AsyncDeleteRow(::grpc::ClientContext* context, const ::csvservice::DeleteRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::ModificationResponse>>(AsyncDeleteRowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::ModificationResponse>> PrepareAsyncDeleteRow(::grpc::ClientContext* context, const ::csvservice::DeleteRowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::ModificationResponse>>(PrepareAsyncDeleteRowRaw(context, request, cq));
    }
    ::grpc::Status GetClusterStatus(::grpc::ClientContext* context, const ::csvservice::Empty& request, ::csvservice::ClusterStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::ClusterStatusResponse>> AsyncGetClusterStatus(::grpc::ClientContext* context, const ::csvservice::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::ClusterStatusResponse>>(AsyncGetClusterStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::ClusterStatusResponse>> PrepareAsyncGetClusterStatus(::grpc::ClientContext* context, const ::csvservice::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::ClusterStatusResponse>>(PrepareAsyncGetClusterStatusRaw(context, request, cq));
    }
    ::grpc::Status RegisterPeer(::grpc::ClientContext* context, const ::csvservice::RegisterPeerRequest& request, ::csvservice::RegisterPeerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::RegisterPeerResponse>> AsyncRegisterPeer(::grpc::ClientContext* context, const ::csvservice::RegisterPeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::RegisterPeerResponse>>(AsyncRegisterPeerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::RegisterPeerResponse>> PrepareAsyncRegisterPeer(::grpc::ClientContext* context, const ::csvservice::RegisterPeerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::RegisterPeerResponse>>(PrepareAsyncRegisterPeerRaw(context, request, cq));
    }
    ::grpc::Status Heartbeat(::grpc::ClientContext* context, const ::csvservice::HeartbeatRequest& request, ::csvservice::HeartbeatResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::HeartbeatResponse>> AsyncHeartbeat(::grpc::ClientContext* context, const ::csvservice::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::HeartbeatResponse>>(AsyncHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::HeartbeatResponse>> PrepareAsyncHeartbeat(::grpc::ClientContext* context, const ::csvservice::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::HeartbeatResponse>>(PrepareAsyncHeartbeatRaw(context, request, cq));
    }
    ::grpc::Status ReplicateUpload(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest& request, ::csvservice::ReplicateUploadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::ReplicateUploadResponse>> AsyncReplicateUpload(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::ReplicateUploadResponse>>(AsyncReplicateUploadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::ReplicateUploadResponse>> PrepareAsyncReplicateUpload(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::ReplicateUploadResponse>>(PrepareAsyncReplicateUploadRaw(context, request, cq));
    }
    ::grpc::Status ApplyMutation(::grpc::ClientContext* context, const ::csvservice::ReplicateMutationRequest& request, ::csvservice::ReplicateMutationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::ReplicateMutationResponse>> AsyncApplyMutation(::grpc::ClientContext* context, const ::csvservice::ReplicateMutationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::ReplicateMutationResponse>>(AsyncApplyMutationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::ReplicateMutationResponse>> PrepareAsyncApplyMutation(::grpc::ClientContext* context, const ::csvservice::ReplicateMutationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csvservice::ReplicateMutationResponse>>(PrepareAsyncApplyMutationRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void UploadCsv(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest* request, ::csvservice::CsvUploadResponse* response, std::function<void(::grpc::Status)>) override;
      void UploadCsv(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest* request, ::csvservice::CsvUploadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListLoadedFiles(::grpc::ClientContext* context, const ::csvservice::Empty* request, ::csvservice::CsvFileList* response, std::function<void(::grpc::Status)>) override;
      void ListLoadedFiles(::grpc::ClientContext* context, const ::csvservice::Empty* request, ::csvservice::CsvFileList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ViewFile(::grpc::ClientContext* context, const ::csvservice::ViewFileRequest* request, ::csvservice::ViewFileResponse* response, std::function<void(::grpc::Status)>) override;
      void ViewFile(::grpc::ClientContext* context, const ::csvservice::ViewFileRequest* request, ::csvservice::ViewFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ComputeSum(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest* request, ::csvservice::NumericResponse* response, std::function<void(::grpc::Status)>) override;
      void ComputeSum(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest* request, ::csvservice::NumericResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ComputeAverage(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest* request, ::csvservice::NumericResponse* response, std::function<void(::grpc::Status)>) override;
      void ComputeAverage(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest* request, ::csvservice::NumericResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void InsertRow(::grpc::ClientContext* context, const ::csvservice::InsertRowRequest* request, ::csvservice::ModificationResponse* response, std::function<void(::grpc::Status)>) override;
      void InsertRow(::grpc::ClientContext* context, const ::csvservice::InsertRowRequest* request, ::csvservice::ModificationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteRow(::grpc::ClientContext* context, const ::csvservice::DeleteRowRequest* request, ::csvservice::ModificationResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteRow(::grpc::ClientContext* context, const ::csvservice::DeleteRowRequest* request, ::csvservice::ModificationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetClusterStatus(::grpc::ClientContext* context, const ::csvservice::Empty* request, ::csvservice::ClusterStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetClusterStatus(::grpc::ClientContext* context, const ::csvservice::Empty* request, ::csvservice::ClusterStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RegisterPeer(::grpc::ClientContext* context, const ::csvservice::RegisterPeerRequest* request, ::csvservice::RegisterPeerResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterPeer(::grpc::ClientContext* context, const ::csvservice::RegisterPeerRequest* request, ::csvservice::RegisterPeerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Heartbeat(::grpc::ClientContext* context, const ::csvservice::HeartbeatRequest* request, ::csvservice::HeartbeatResponse* response, std::function<void(::grpc::Status)>) override;
      void Heartbeat(::grpc::ClientContext* context, const ::csvservice::HeartbeatRequest* request, ::csvservice::HeartbeatResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReplicateUpload(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest* request, ::csvservice::ReplicateUploadResponse* response, std::function<void(::grpc::Status)>) override;
      void ReplicateUpload(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest* request, ::csvservice::ReplicateUploadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ApplyMutation(::grpc::ClientContext* context, const ::csvservice::ReplicateMutationRequest* request, ::csvservice::ReplicateMutationResponse* response, std::function<void(::grpc::Status)>) override;
      void ApplyMutation(::grpc::ClientContext* context, const ::csvservice::ReplicateMutationRequest* request, ::csvservice::ReplicateMutationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::csvservice::CsvUploadResponse>* AsyncUploadCsvRaw(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csvservice::CsvUploadResponse>* PrepareAsyncUploadCsvRaw(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csvservice::CsvFileList>* AsyncListLoadedFilesRaw(::grpc::ClientContext* context, const ::csvservice::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csvservice::CsvFileList>* PrepareAsyncListLoadedFilesRaw(::grpc::ClientContext* context, const ::csvservice::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csvservice::ViewFileResponse>* AsyncViewFileRaw(::grpc::ClientContext* context, const ::csvservice::ViewFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csvservice::ViewFileResponse>* PrepareAsyncViewFileRaw(::grpc::ClientContext* context, const ::csvservice::ViewFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csvservice::NumericResponse>* AsyncComputeSumRaw(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csvservice::NumericResponse>* PrepareAsyncComputeSumRaw(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csvservice::NumericResponse>* AsyncComputeAverageRaw(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csvservice::NumericResponse>* PrepareAsyncComputeAverageRaw(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csvservice::ModificationResponse>* AsyncInsertRowRaw(::grpc::ClientContext* context, const ::csvservice::InsertRowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csvservice::ModificationResponse>* PrepareAsyncInsertRowRaw(::grpc::ClientContext* context, const ::csvservice::InsertRowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csvservice::ModificationResponse>* AsyncDeleteRowRaw(::grpc::ClientContext* context, const ::csvservice::DeleteRowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csvservice::ModificationResponse>* PrepareAsyncDeleteRowRaw(::grpc::ClientContext* context, const ::csvservice::DeleteRowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csvservice::ClusterStatusResponse>* AsyncGetClusterStatusRaw(::grpc::ClientContext* context, const ::csvservice::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csvservice::ClusterStatusResponse>* PrepareAsyncGetClusterStatusRaw(::grpc::ClientContext* context, const ::csvservice::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csvservice::RegisterPeerResponse>* AsyncRegisterPeerRaw(::grpc::ClientContext* context, const ::csvservice::RegisterPeerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csvservice::RegisterPeerResponse>* PrepareAsyncRegisterPeerRaw(::grpc::ClientContext* context, const ::csvservice::RegisterPeerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csvservice::HeartbeatResponse>* AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::csvservice::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csvservice::HeartbeatResponse>* PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::csvservice::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csvservice::ReplicateUploadResponse>* AsyncReplicateUploadRaw(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csvservice::ReplicateUploadResponse>* PrepareAsyncReplicateUploadRaw(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csvservice::ReplicateMutationResponse>* AsyncApplyMutationRaw(::grpc::ClientContext* context, const ::csvservice::ReplicateMutationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csvservice::ReplicateMutationResponse>* PrepareAsyncApplyMutationRaw(::grpc::ClientContext* context, const ::csvservice::ReplicateMutationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_UploadCsv_;
    const ::grpc::internal::RpcMethod rpcmethod_ListLoadedFiles_;
    const ::grpc::internal::RpcMethod rpcmethod_ViewFile_;
    const ::grpc::internal::RpcMethod rpcmethod_ComputeSum_;
    const ::grpc::internal::RpcMethod rpcmethod_ComputeAverage_;
    const ::grpc::internal::RpcMethod rpcmethod_InsertRow_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRow_;
    const ::grpc::internal::RpcMethod rpcmethod_GetClusterStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterPeer_;
    const ::grpc::internal::RpcMethod rpcmethod_Heartbeat_;
    const ::grpc::internal::RpcMethod rpcmethod_ReplicateUpload_;
    const ::grpc::internal::RpcMethod rpcmethod_ApplyMutation_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Existing RPCs
    virtual ::grpc::Status UploadCsv(::grpc::ServerContext* context, const ::csvservice::CsvUploadRequest* request, ::csvservice::CsvUploadResponse* response);
    virtual ::grpc::Status ListLoadedFiles(::grpc::ServerContext* context, const ::csvservice::Empty* request, ::csvservice::CsvFileList* response);
    // New RPCs for extended functionality
    virtual ::grpc::Status ViewFile(::grpc::ServerContext* context, const ::csvservice::ViewFileRequest* request, ::csvservice::ViewFileResponse* response);
    virtual ::grpc::Status ComputeSum(::grpc::ServerContext* context, const ::csvservice::ColumnOperationRequest* request, ::csvservice::NumericResponse* response);
    virtual ::grpc::Status ComputeAverage(::grpc::ServerContext* context, const ::csvservice::ColumnOperationRequest* request, ::csvservice::NumericResponse* response);
    virtual ::grpc::Status InsertRow(::grpc::ServerContext* context, const ::csvservice::InsertRowRequest* request, ::csvservice::ModificationResponse* response);
    virtual ::grpc::Status DeleteRow(::grpc::ServerContext* context, const ::csvservice::DeleteRowRequest* request, ::csvservice::ModificationResponse* response);
    // Fault tolerance and cluster management
    virtual ::grpc::Status GetClusterStatus(::grpc::ServerContext* context, const ::csvservice::Empty* request, ::csvservice::ClusterStatusResponse* response);
    virtual ::grpc::Status RegisterPeer(::grpc::ServerContext* context, const ::csvservice::RegisterPeerRequest* request, ::csvservice::RegisterPeerResponse* response);
    virtual ::grpc::Status Heartbeat(::grpc::ServerContext* context, const ::csvservice::HeartbeatRequest* request, ::csvservice::HeartbeatResponse* response);
    // Internal RPC used by the leader to replicate an upload to peers
    virtual ::grpc::Status ReplicateUpload(::grpc::ServerContext* context, const ::csvservice::CsvUploadRequest* request, ::csvservice::ReplicateUploadResponse* response);
    // Internal RPC used by the leader to replicate a mutation to peers
    virtual ::grpc::Status ApplyMutation(::grpc::ServerContext* context, const ::csvservice::ReplicateMutationRequest* request, ::csvservice::ReplicateMutationResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_UploadCsv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UploadCsv() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_UploadCsv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadCsv(::grpc::ServerContext* /*context*/, const ::csvservice::CsvUploadRequest* /*request*/, ::csvservice::CsvUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadCsv(::grpc::ServerContext* context, ::csvservice::CsvUploadRequest* request, ::grpc::ServerAsyncResponseWriter< ::csvservice::CsvUploadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListLoadedFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListLoadedFiles() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListLoadedFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLoadedFiles(::grpc::ServerContext* /*context*/, const ::csvservice::Empty* /*request*/, ::csvservice::CsvFileList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListLoadedFiles(::grpc::ServerContext* context, ::csvservice::Empty* request, ::grpc::ServerAsyncResponseWriter< ::csvservice::CsvFileList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ViewFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ViewFile() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ViewFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewFile(::grpc::ServerContext* /*context*/, const ::csvservice::ViewFileRequest* /*request*/, ::csvservice::ViewFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewFile(::grpc::ServerContext* context, ::csvservice::ViewFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::csvservice::ViewFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ComputeSum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ComputeSum() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ComputeSum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeSum(::grpc::ServerContext* /*context*/, const ::csvservice::ColumnOperationRequest* /*request*/, ::csvservice::NumericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestComputeSum(::grpc::ServerContext* context, ::csvservice::ColumnOperationRequest* request, ::grpc::ServerAsyncResponseWriter< ::csvservice::NumericResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ComputeAverage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ComputeAverage() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ComputeAverage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeAverage(::grpc::ServerContext* /*context*/, const ::csvservice::ColumnOperationRequest* /*request*/, ::csvservice::NumericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestComputeAverage(::grpc::ServerContext* context, ::csvservice::ColumnOperationRequest* request, ::grpc::ServerAsyncResponseWriter< ::csvservice::NumericResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InsertRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InsertRow() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_InsertRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertRow(::grpc::ServerContext* /*context*/, const ::csvservice::InsertRowRequest* /*request*/, ::csvservice::ModificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertRow(::grpc::ServerContext* context, ::csvservice::InsertRowRequest* request, ::grpc::ServerAsyncResponseWriter< ::csvservice::ModificationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteRow() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DeleteRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRow(::grpc::ServerContext* /*context*/, const ::csvservice::DeleteRowRequest* /*request*/, ::csvservice::ModificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRow(::grpc::ServerContext* context, ::csvservice::DeleteRowRequest* request, ::grpc::ServerAsyncResponseWriter< ::csvservice::ModificationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetClusterStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetClusterStatus() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetClusterStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClusterStatus(::grpc::ServerContext* /*context*/, const ::csvservice::Empty* /*request*/, ::csvservice::ClusterStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetClusterStatus(::grpc::ServerContext* context, ::csvservice::Empty* request, ::grpc::ServerAsyncResponseWriter< ::csvservice::ClusterStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterPeer() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_RegisterPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPeer(::grpc::ServerContext* /*context*/, const ::csvservice::RegisterPeerRequest* /*request*/, ::csvservice::RegisterPeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterPeer(::grpc::ServerContext* context, ::csvservice::RegisterPeerRequest* request, ::grpc::ServerAsyncResponseWriter< ::csvservice::RegisterPeerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Heartbeat() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::csvservice::HeartbeatRequest* /*request*/, ::csvservice::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeartbeat(::grpc::ServerContext* context, ::csvservice::HeartbeatRequest* request, ::grpc::ServerAsyncResponseWriter< ::csvservice::HeartbeatResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReplicateUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReplicateUpload() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_ReplicateUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateUpload(::grpc::ServerContext* /*context*/, const ::csvservice::CsvUploadRequest* /*request*/, ::csvservice::ReplicateUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplicateUpload(::grpc::ServerContext* context, ::csvservice::CsvUploadRequest* request, ::grpc::ServerAsyncResponseWriter< ::csvservice::ReplicateUploadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ApplyMutation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ApplyMutation() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_ApplyMutation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyMutation(::grpc::ServerContext* /*context*/, const ::csvservice::ReplicateMutationRequest* /*request*/, ::csvservice::ReplicateMutationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestApplyMutation(::grpc::ServerContext* context, ::csvservice::ReplicateMutationRequest* request, ::grpc::ServerAsyncResponseWriter< ::csvservice::ReplicateMutationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_UploadCsv<WithAsyncMethod_ListLoadedFiles<WithAsyncMethod_ViewFile<WithAsyncMethod_ComputeSum<WithAsyncMethod_ComputeAverage<WithAsyncMethod_InsertRow<WithAsyncMethod_DeleteRow<WithAsyncMethod_GetClusterStatus<WithAsyncMethod_RegisterPeer<WithAsyncMethod_Heartbeat<WithAsyncMethod_ReplicateUpload<WithAsyncMethod_ApplyMutation<Service > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_UploadCsv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UploadCsv() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::csvservice::CsvUploadRequest, ::csvservice::CsvUploadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csvservice::CsvUploadRequest* request, ::csvservice::CsvUploadResponse* response) { return this->UploadCsv(context, request, response); }));}
    void SetMessageAllocatorFor_UploadCsv(
        ::grpc::MessageAllocator< ::csvservice::CsvUploadRequest, ::csvservice::CsvUploadResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csvservice::CsvUploadRequest, ::csvservice::CsvUploadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UploadCsv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadCsv(::grpc::ServerContext* /*context*/, const ::csvservice::CsvUploadRequest* /*request*/, ::csvservice::CsvUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UploadCsv(
      ::grpc::CallbackServerContext* /*context*/, const ::csvservice::CsvUploadRequest* /*request*/, ::csvservice::CsvUploadResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListLoadedFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListLoadedFiles() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::csvservice::Empty, ::csvservice::CsvFileList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csvservice::Empty* request, ::csvservice::CsvFileList* response) { return this->ListLoadedFiles(context, request, response); }));}
    void SetMessageAllocatorFor_ListLoadedFiles(
        ::grpc::MessageAllocator< ::csvservice::Empty, ::csvservice::CsvFileList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csvservice::Empty, ::csvservice::CsvFileList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListLoadedFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLoadedFiles(::grpc::ServerContext* /*context*/, const ::csvservice::Empty* /*request*/, ::csvservice::CsvFileList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListLoadedFiles(
      ::grpc::CallbackServerContext* /*context*/, const ::csvservice::Empty* /*request*/, ::csvservice::CsvFileList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ViewFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ViewFile() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::csvservice::ViewFileRequest, ::csvservice::ViewFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csvservice::ViewFileRequest* request, ::csvservice::ViewFileResponse* response) { return this->ViewFile(context, request, response); }));}
    void SetMessageAllocatorFor_ViewFile(
        ::grpc::MessageAllocator< ::csvservice::ViewFileRequest, ::csvservice::ViewFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csvservice::ViewFileRequest, ::csvservice::ViewFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ViewFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewFile(::grpc::ServerContext* /*context*/, const ::csvservice::ViewFileRequest* /*request*/, ::csvservice::ViewFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewFile(
      ::grpc::CallbackServerContext* /*context*/, const ::csvservice::ViewFileRequest* /*request*/, ::csvservice::ViewFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ComputeSum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ComputeSum() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::csvservice::ColumnOperationRequest, ::csvservice::NumericResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csvservice::ColumnOperationRequest* request, ::csvservice::NumericResponse* response) { return this->ComputeSum(context, request, response); }));}
    void SetMessageAllocatorFor_ComputeSum(
        ::grpc::MessageAllocator< ::csvservice::ColumnOperationRequest, ::csvservice::NumericResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csvservice::ColumnOperationRequest, ::csvservice::NumericResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ComputeSum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeSum(::grpc::ServerContext* /*context*/, const ::csvservice::ColumnOperationRequest* /*request*/, ::csvservice::NumericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ComputeSum(
      ::grpc::CallbackServerContext* /*context*/, const ::csvservice::ColumnOperationRequest* /*request*/, ::csvservice::NumericResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ComputeAverage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ComputeAverage() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::csvservice::ColumnOperationRequest, ::csvservice::NumericResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csvservice::ColumnOperationRequest* request, ::csvservice::NumericResponse* response) { return this->ComputeAverage(context, request, response); }));}
    void SetMessageAllocatorFor_ComputeAverage(
        ::grpc::MessageAllocator< ::csvservice::ColumnOperationRequest, ::csvservice::NumericResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csvservice::ColumnOperationRequest, ::csvservice::NumericResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ComputeAverage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeAverage(::grpc::ServerContext* /*context*/, const ::csvservice::ColumnOperationRequest* /*request*/, ::csvservice::NumericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ComputeAverage(
      ::grpc::CallbackServerContext* /*context*/, const ::csvservice::ColumnOperationRequest* /*request*/, ::csvservice::NumericResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_InsertRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InsertRow() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::csvservice::InsertRowRequest, ::csvservice::ModificationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csvservice::InsertRowRequest* request, ::csvservice::ModificationResponse* response) { return this->InsertRow(context, request, response); }));}
    void SetMessageAllocatorFor_InsertRow(
        ::grpc::MessageAllocator< ::csvservice::InsertRowRequest, ::csvservice::ModificationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csvservice::InsertRowRequest, ::csvservice::ModificationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InsertRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertRow(::grpc::ServerContext* /*context*/, const ::csvservice::InsertRowRequest* /*request*/, ::csvservice::ModificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InsertRow(
      ::grpc::CallbackServerContext* /*context*/, const ::csvservice::InsertRowRequest* /*request*/, ::csvservice::ModificationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteRow() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::csvservice::DeleteRowRequest, ::csvservice::ModificationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csvservice::DeleteRowRequest* request, ::csvservice::ModificationResponse* response) { return this->DeleteRow(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteRow(
        ::grpc::MessageAllocator< ::csvservice::DeleteRowRequest, ::csvservice::ModificationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csvservice::DeleteRowRequest, ::csvservice::ModificationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRow(::grpc::ServerContext* /*context*/, const ::csvservice::DeleteRowRequest* /*request*/, ::csvservice::ModificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRow(
      ::grpc::CallbackServerContext* /*context*/, const ::csvservice::DeleteRowRequest* /*request*/, ::csvservice::ModificationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetClusterStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetClusterStatus() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::csvservice::Empty, ::csvservice::ClusterStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csvservice::Empty* request, ::csvservice::ClusterStatusResponse* response) { return this->GetClusterStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetClusterStatus(
        ::grpc::MessageAllocator< ::csvservice::Empty, ::csvservice::ClusterStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csvservice::Empty, ::csvservice::ClusterStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetClusterStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClusterStatus(::grpc::ServerContext* /*context*/, const ::csvservice::Empty* /*request*/, ::csvservice::ClusterStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetClusterStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::csvservice::Empty* /*request*/, ::csvservice::ClusterStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegisterPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterPeer() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::csvservice::RegisterPeerRequest, ::csvservice::RegisterPeerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csvservice::RegisterPeerRequest* request, ::csvservice::RegisterPeerResponse* response) { return this->RegisterPeer(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterPeer(
        ::grpc::MessageAllocator< ::csvservice::RegisterPeerRequest, ::csvservice::RegisterPeerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csvservice::RegisterPeerRequest, ::csvservice::RegisterPeerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPeer(::grpc::ServerContext* /*context*/, const ::csvservice::RegisterPeerRequest* /*request*/, ::csvservice::RegisterPeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterPeer(
      ::grpc::CallbackServerContext* /*context*/, const ::csvservice::RegisterPeerRequest* /*request*/, ::csvservice::RegisterPeerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Heartbeat() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::csvservice::HeartbeatRequest, ::csvservice::HeartbeatResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csvservice::HeartbeatRequest* request, ::csvservice::HeartbeatResponse* response) { return this->Heartbeat(context, request, response); }));}
    void SetMessageAllocatorFor_Heartbeat(
        ::grpc::MessageAllocator< ::csvservice::HeartbeatRequest, ::csvservice::HeartbeatResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csvservice::HeartbeatRequest, ::csvservice::HeartbeatResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::csvservice::HeartbeatRequest* /*request*/, ::csvservice::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Heartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::csvservice::HeartbeatRequest* /*request*/, ::csvservice::HeartbeatResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReplicateUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReplicateUpload() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::csvservice::CsvUploadRequest, ::csvservice::ReplicateUploadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csvservice::CsvUploadRequest* request, ::csvservice::ReplicateUploadResponse* response) { return this->ReplicateUpload(context, request, response); }));}
    void SetMessageAllocatorFor_ReplicateUpload(
        ::grpc::MessageAllocator< ::csvservice::CsvUploadRequest, ::csvservice::ReplicateUploadResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csvservice::CsvUploadRequest, ::csvservice::ReplicateUploadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReplicateUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateUpload(::grpc::ServerContext* /*context*/, const ::csvservice::CsvUploadRequest* /*request*/, ::csvservice::ReplicateUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplicateUpload(
      ::grpc::CallbackServerContext* /*context*/, const ::csvservice::CsvUploadRequest* /*request*/, ::csvservice::ReplicateUploadResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ApplyMutation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ApplyMutation() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::csvservice::ReplicateMutationRequest, ::csvservice::ReplicateMutationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csvservice::ReplicateMutationRequest* request, ::csvservice::ReplicateMutationResponse* response) { return this->ApplyMutation(context, request, response); }));}
    void SetMessageAllocatorFor_ApplyMutation(
        ::grpc::MessageAllocator< ::csvservice::ReplicateMutationRequest, ::csvservice::ReplicateMutationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csvservice::ReplicateMutationRequest, ::csvservice::ReplicateMutationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ApplyMutation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyMutation(::grpc::ServerContext* /*context*/, const ::csvservice::ReplicateMutationRequest* /*request*/, ::csvservice::ReplicateMutationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ApplyMutation(
      ::grpc::CallbackServerContext* /*context*/, const ::csvservice::ReplicateMutationRequest* /*request*/, ::csvservice::ReplicateMutationResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_UploadCsv<WithCallbackMethod_ListLoadedFiles<WithCallbackMethod_ViewFile<WithCallbackMethod_ComputeSum<WithCallbackMethod_ComputeAverage<WithCallbackMethod_InsertRow<WithCallbackMethod_DeleteRow<WithCallbackMethod_GetClusterStatus<WithCallbackMethod_RegisterPeer<WithCallbackMethod_Heartbeat<WithCallbackMethod_ReplicateUpload<WithCallbackMethod_ApplyMutation<Service > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_UploadCsv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UploadCsv() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_UploadCsv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadCsv(::grpc::ServerContext* /*context*/, const ::csvservice::CsvUploadRequest* /*request*/, ::csvservice::CsvUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListLoadedFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListLoadedFiles() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListLoadedFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLoadedFiles(::grpc::ServerContext* /*context*/, const ::csvservice::Empty* /*request*/, ::csvservice::CsvFileList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ViewFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ViewFile() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ViewFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewFile(::grpc::ServerContext* /*context*/, const ::csvservice::ViewFileRequest* /*request*/, ::csvservice::ViewFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ComputeSum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ComputeSum() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ComputeSum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeSum(::grpc::ServerContext* /*context*/, const ::csvservice::ColumnOperationRequest* /*request*/, ::csvservice::NumericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ComputeAverage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ComputeAverage() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ComputeAverage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeAverage(::grpc::ServerContext* /*context*/, const ::csvservice::ColumnOperationRequest* /*request*/, ::csvservice::NumericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InsertRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InsertRow() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_InsertRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertRow(::grpc::ServerContext* /*context*/, const ::csvservice::InsertRowRequest* /*request*/, ::csvservice::ModificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteRow() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DeleteRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRow(::grpc::ServerContext* /*context*/, const ::csvservice::DeleteRowRequest* /*request*/, ::csvservice::ModificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetClusterStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetClusterStatus() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetClusterStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClusterStatus(::grpc::ServerContext* /*context*/, const ::csvservice::Empty* /*request*/, ::csvservice::ClusterStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterPeer() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_RegisterPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPeer(::grpc::ServerContext* /*context*/, const ::csvservice::RegisterPeerRequest* /*request*/, ::csvservice::RegisterPeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Heartbeat() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::csvservice::HeartbeatRequest* /*request*/, ::csvservice::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReplicateUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReplicateUpload() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_ReplicateUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateUpload(::grpc::ServerContext* /*context*/, const ::csvservice::CsvUploadRequest* /*request*/, ::csvservice::ReplicateUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ApplyMutation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ApplyMutation() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_ApplyMutation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyMutation(::grpc::ServerContext* /*context*/, const ::csvservice::ReplicateMutationRequest* /*request*/, ::csvservice::ReplicateMutationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_UploadCsv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UploadCsv() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_UploadCsv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadCsv(::grpc::ServerContext* /*context*/, const ::csvservice::CsvUploadRequest* /*request*/, ::csvservice::CsvUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadCsv(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListLoadedFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListLoadedFiles() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListLoadedFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLoadedFiles(::grpc::ServerContext* /*context*/, const ::csvservice::Empty* /*request*/, ::csvservice::CsvFileList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListLoadedFiles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ViewFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ViewFile() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ViewFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewFile(::grpc::ServerContext* /*context*/, const ::csvservice::ViewFileRequest* /*request*/, ::csvservice::ViewFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestViewFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ComputeSum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ComputeSum() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ComputeSum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeSum(::grpc::ServerContext* /*context*/, const ::csvservice::ColumnOperationRequest* /*request*/, ::csvservice::NumericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestComputeSum(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ComputeAverage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ComputeAverage() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ComputeAverage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeAverage(::grpc::ServerContext* /*context*/, const ::csvservice::ColumnOperationRequest* /*request*/, ::csvservice::NumericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestComputeAverage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InsertRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InsertRow() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_InsertRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertRow(::grpc::ServerContext* /*context*/, const ::csvservice::InsertRowRequest* /*request*/, ::csvservice::ModificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertRow(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteRow() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_DeleteRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRow(::grpc::ServerContext* /*context*/, const ::csvservice::DeleteRowRequest* /*request*/, ::csvservice::ModificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRow(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetClusterStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetClusterStatus() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetClusterStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClusterStatus(::grpc::ServerContext* /*context*/, const ::csvservice::Empty* /*request*/, ::csvservice::ClusterStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetClusterStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterPeer() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_RegisterPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPeer(::grpc::ServerContext* /*context*/, const ::csvservice::RegisterPeerRequest* /*request*/, ::csvservice::RegisterPeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterPeer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Heartbeat() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::csvservice::HeartbeatRequest* /*request*/, ::csvservice::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeartbeat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReplicateUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReplicateUpload() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_ReplicateUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateUpload(::grpc::ServerContext* /*context*/, const ::csvservice::CsvUploadRequest* /*request*/, ::csvservice::ReplicateUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReplicateUpload(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ApplyMutation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ApplyMutation() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_ApplyMutation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyMutation(::grpc::ServerContext* /*context*/, const ::csvservice::ReplicateMutationRequest* /*request*/, ::csvservice::ReplicateMutationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestApplyMutation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UploadCsv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UploadCsv() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UploadCsv(context, request, response); }));
    }
    ~WithRawCallbackMethod_UploadCsv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadCsv(::grpc::ServerContext* /*context*/, const ::csvservice::CsvUploadRequest* /*request*/, ::csvservice::CsvUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UploadCsv(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListLoadedFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListLoadedFiles() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListLoadedFiles(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListLoadedFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLoadedFiles(::grpc::ServerContext* /*context*/, const ::csvservice::Empty* /*request*/, ::csvservice::CsvFileList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListLoadedFiles(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ViewFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ViewFile() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ViewFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_ViewFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ViewFile(::grpc::ServerContext* /*context*/, const ::csvservice::ViewFileRequest* /*request*/, ::csvservice::ViewFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ViewFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ComputeSum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ComputeSum() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ComputeSum(context, request, response); }));
    }
    ~WithRawCallbackMethod_ComputeSum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeSum(::grpc::ServerContext* /*context*/, const ::csvservice::ColumnOperationRequest* /*request*/, ::csvservice::NumericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ComputeSum(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ComputeAverage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ComputeAverage() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ComputeAverage(context, request, response); }));
    }
    ~WithRawCallbackMethod_ComputeAverage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ComputeAverage(::grpc::ServerContext* /*context*/, const ::csvservice::ColumnOperationRequest* /*request*/, ::csvservice::NumericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ComputeAverage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InsertRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InsertRow() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InsertRow(context, request, response); }));
    }
    ~WithRawCallbackMethod_InsertRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertRow(::grpc::ServerContext* /*context*/, const ::csvservice::InsertRowRequest* /*request*/, ::csvservice::ModificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InsertRow(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteRow() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteRow(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRow(::grpc::ServerContext* /*context*/, const ::csvservice::DeleteRowRequest* /*request*/, ::csvservice::ModificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRow(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetClusterStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetClusterStatus() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetClusterStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetClusterStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClusterStatus(::grpc::ServerContext* /*context*/, const ::csvservice::Empty* /*request*/, ::csvservice::ClusterStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetClusterStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterPeer() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterPeer(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPeer(::grpc::ServerContext* /*context*/, const ::csvservice::RegisterPeerRequest* /*request*/, ::csvservice::RegisterPeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterPeer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Heartbeat() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Heartbeat(context, request, response); }));
    }
    ~WithRawCallbackMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::csvservice::HeartbeatRequest* /*request*/, ::csvservice::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Heartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReplicateUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReplicateUpload() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReplicateUpload(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReplicateUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReplicateUpload(::grpc::ServerContext* /*context*/, const ::csvservice::CsvUploadRequest* /*request*/, ::csvservice::ReplicateUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReplicateUpload(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ApplyMutation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ApplyMutation() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ApplyMutation(context, request, response); }));
    }
    ~WithRawCallbackMethod_ApplyMutation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyMutation(::grpc::ServerContext* /*context*/, const ::csvservice::ReplicateMutationRequest* /*request*/, ::csvservice::ReplicateMutationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ApplyMutation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UploadCsv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UploadCsv() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csvservice::CsvUploadRequest, ::csvservice::CsvUploadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csvservice::CsvUploadRequest, ::csvservice::CsvUploadResponse>* streamer) {
                       return this->StreamedUploadCsv(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UploadCsv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UploadCsv(::grpc::ServerContext* /*context*/, const ::csvservice::CsvUploadRequest* /*request*/, ::csvservice::CsvUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUploadCsv(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csvservice::CsvUploadRequest,::csvservice::CsvUploadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListLoadedFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListLoadedFiles() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csvservice::Empty, ::csvservice::CsvFileList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csvservice::Empty, ::csvservice::CsvFileList>* streamer) {
                       return this->StreamedListLoadedFiles(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListLoadedFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListLoadedFiles(::grpc::ServerContext* /*context*/, const ::csvservice::Empty* /*request*/, ::csvservice::CsvFileList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListLoadedFiles(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csvservice::Empty,::csvservice::CsvFileList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ViewFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ViewFile() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csvservice::ViewFileRequest, ::csvservice::ViewFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csvservice::ViewFileRequest, ::csvservice::ViewFileResponse>* streamer) {
                       return this->StreamedViewFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ViewFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ViewFile(::grpc::ServerContext* /*context*/, const ::csvservice::ViewFileRequest* /*request*/, ::csvservice::ViewFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedViewFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csvservice::ViewFileRequest,::csvservice::ViewFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ComputeSum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ComputeSum() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csvservice::ColumnOperationRequest, ::csvservice::NumericResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csvservice::ColumnOperationRequest, ::csvservice::NumericResponse>* streamer) {
                       return this->StreamedComputeSum(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ComputeSum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ComputeSum(::grpc::ServerContext* /*context*/, const ::csvservice::ColumnOperationRequest* /*request*/, ::csvservice::NumericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedComputeSum(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csvservice::ColumnOperationRequest,::csvservice::NumericResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ComputeAverage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ComputeAverage() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csvservice::ColumnOperationRequest, ::csvservice::NumericResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csvservice::ColumnOperationRequest, ::csvservice::NumericResponse>* streamer) {
                       return this->StreamedComputeAverage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ComputeAverage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ComputeAverage(::grpc::ServerContext* /*context*/, const ::csvservice::ColumnOperationRequest* /*request*/, ::csvservice::NumericResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedComputeAverage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csvservice::ColumnOperationRequest,::csvservice::NumericResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InsertRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InsertRow() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csvservice::InsertRowRequest, ::csvservice::ModificationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csvservice::InsertRowRequest, ::csvservice::ModificationResponse>* streamer) {
                       return this->StreamedInsertRow(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InsertRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InsertRow(::grpc::ServerContext* /*context*/, const ::csvservice::InsertRowRequest* /*request*/, ::csvservice::ModificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInsertRow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csvservice::InsertRowRequest,::csvservice::ModificationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteRow() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csvservice::DeleteRowRequest, ::csvservice::ModificationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csvservice::DeleteRowRequest, ::csvservice::ModificationResponse>* streamer) {
                       return this->StreamedDeleteRow(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteRow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRow(::grpc::ServerContext* /*context*/, const ::csvservice::DeleteRowRequest* /*request*/, ::csvservice::ModificationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csvservice::DeleteRowRequest,::csvservice::ModificationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetClusterStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetClusterStatus() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csvservice::Empty, ::csvservice::ClusterStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csvservice::Empty, ::csvservice::ClusterStatusResponse>* streamer) {
                       return this->StreamedGetClusterStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetClusterStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetClusterStatus(::grpc::ServerContext* /*context*/, const ::csvservice::Empty* /*request*/, ::csvservice::ClusterStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetClusterStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csvservice::Empty,::csvservice::ClusterStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterPeer() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csvservice::RegisterPeerRequest, ::csvservice::RegisterPeerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csvservice::RegisterPeerRequest, ::csvservice::RegisterPeerResponse>* streamer) {
                       return this->StreamedRegisterPeer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterPeer(::grpc::ServerContext* /*context*/, const ::csvservice::RegisterPeerRequest* /*request*/, ::csvservice::RegisterPeerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterPeer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csvservice::RegisterPeerRequest,::csvservice::RegisterPeerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Heartbeat() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csvservice::HeartbeatRequest, ::csvservice::HeartbeatResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csvservice::HeartbeatRequest, ::csvservice::HeartbeatResponse>* streamer) {
                       return this->StreamedHeartbeat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::csvservice::HeartbeatRequest* /*request*/, ::csvservice::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHeartbeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csvservice::HeartbeatRequest,::csvservice::HeartbeatResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReplicateUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReplicateUpload() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csvservice::CsvUploadRequest, ::csvservice::ReplicateUploadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csvservice::CsvUploadRequest, ::csvservice::ReplicateUploadResponse>* streamer) {
                       return this->StreamedReplicateUpload(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReplicateUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReplicateUpload(::grpc::ServerContext* /*context*/, const ::csvservice::CsvUploadRequest* /*request*/, ::csvservice::ReplicateUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReplicateUpload(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csvservice::CsvUploadRequest,::csvservice::ReplicateUploadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ApplyMutation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ApplyMutation() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csvservice::ReplicateMutationRequest, ::csvservice::ReplicateMutationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csvservice::ReplicateMutationRequest, ::csvservice::ReplicateMutationResponse>* streamer) {
                       return this->StreamedApplyMutation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ApplyMutation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ApplyMutation(::grpc::ServerContext* /*context*/, const ::csvservice::ReplicateMutationRequest* /*request*/, ::csvservice::ReplicateMutationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedApplyMutation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csvservice::ReplicateMutationRequest,::csvservice::ReplicateMutationResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_UploadCsv<WithStreamedUnaryMethod_ListLoadedFiles<WithStreamedUnaryMethod_ViewFile<WithStreamedUnaryMethod_ComputeSum<WithStreamedUnaryMethod_ComputeAverage<WithStreamedUnaryMethod_InsertRow<WithStreamedUnaryMethod_DeleteRow<WithStreamedUnaryMethod_GetClusterStatus<WithStreamedUnaryMethod_RegisterPeer<WithStreamedUnaryMethod_Heartbeat<WithStreamedUnaryMethod_ReplicateUpload<WithStreamedUnaryMethod_ApplyMutation<Service > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_UploadCsv<WithStreamedUnaryMethod_ListLoadedFiles<WithStreamedUnaryMethod_ViewFile<WithStreamedUnaryMethod_ComputeSum<WithStreamedUnaryMethod_ComputeAverage<WithStreamedUnaryMethod_InsertRow<WithStreamedUnaryMethod_DeleteRow<WithStreamedUnaryMethod_GetClusterStatus<WithStreamedUnaryMethod_RegisterPeer<WithStreamedUnaryMethod_Heartbeat<WithStreamedUnaryMethod_ReplicateUpload<WithStreamedUnaryMethod_ApplyMutation<Service > > > > > > > > > > > > StreamedService;
};

}  // namespace csvservice


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_proto_2fcsv_5fservice_2eproto__INCLUDED
