// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/csv_service.proto

#include "proto/csv_service.pb.h"
#include "proto/csv_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace csvservice {

static const char* CsvService_method_names[] = {
  "/csvservice.CsvService/UploadCsv",
  "/csvservice.CsvService/ListLoadedFiles",
  "/csvservice.CsvService/ViewFile",
  "/csvservice.CsvService/ComputeSum",
  "/csvservice.CsvService/ComputeAverage",
  "/csvservice.CsvService/InsertRow",
  "/csvservice.CsvService/DeleteRow",
};

std::unique_ptr< CsvService::Stub> CsvService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CsvService::Stub> stub(new CsvService::Stub(channel, options));
  return stub;
}

CsvService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UploadCsv_(CsvService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListLoadedFiles_(CsvService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ViewFile_(CsvService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ComputeSum_(CsvService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ComputeAverage_(CsvService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InsertRow_(CsvService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRow_(CsvService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CsvService::Stub::UploadCsv(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest& request, ::csvservice::CsvUploadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csvservice::CsvUploadRequest, ::csvservice::CsvUploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UploadCsv_, context, request, response);
}

void CsvService::Stub::async::UploadCsv(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest* request, ::csvservice::CsvUploadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csvservice::CsvUploadRequest, ::csvservice::CsvUploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadCsv_, context, request, response, std::move(f));
}

void CsvService::Stub::async::UploadCsv(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest* request, ::csvservice::CsvUploadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadCsv_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csvservice::CsvUploadResponse>* CsvService::Stub::PrepareAsyncUploadCsvRaw(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csvservice::CsvUploadResponse, ::csvservice::CsvUploadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UploadCsv_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csvservice::CsvUploadResponse>* CsvService::Stub::AsyncUploadCsvRaw(::grpc::ClientContext* context, const ::csvservice::CsvUploadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadCsvRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CsvService::Stub::ListLoadedFiles(::grpc::ClientContext* context, const ::csvservice::Empty& request, ::csvservice::CsvFileList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csvservice::Empty, ::csvservice::CsvFileList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListLoadedFiles_, context, request, response);
}

void CsvService::Stub::async::ListLoadedFiles(::grpc::ClientContext* context, const ::csvservice::Empty* request, ::csvservice::CsvFileList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csvservice::Empty, ::csvservice::CsvFileList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListLoadedFiles_, context, request, response, std::move(f));
}

void CsvService::Stub::async::ListLoadedFiles(::grpc::ClientContext* context, const ::csvservice::Empty* request, ::csvservice::CsvFileList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListLoadedFiles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csvservice::CsvFileList>* CsvService::Stub::PrepareAsyncListLoadedFilesRaw(::grpc::ClientContext* context, const ::csvservice::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csvservice::CsvFileList, ::csvservice::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListLoadedFiles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csvservice::CsvFileList>* CsvService::Stub::AsyncListLoadedFilesRaw(::grpc::ClientContext* context, const ::csvservice::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListLoadedFilesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CsvService::Stub::ViewFile(::grpc::ClientContext* context, const ::csvservice::ViewFileRequest& request, ::csvservice::ViewFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csvservice::ViewFileRequest, ::csvservice::ViewFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ViewFile_, context, request, response);
}

void CsvService::Stub::async::ViewFile(::grpc::ClientContext* context, const ::csvservice::ViewFileRequest* request, ::csvservice::ViewFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csvservice::ViewFileRequest, ::csvservice::ViewFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewFile_, context, request, response, std::move(f));
}

void CsvService::Stub::async::ViewFile(::grpc::ClientContext* context, const ::csvservice::ViewFileRequest* request, ::csvservice::ViewFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ViewFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csvservice::ViewFileResponse>* CsvService::Stub::PrepareAsyncViewFileRaw(::grpc::ClientContext* context, const ::csvservice::ViewFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csvservice::ViewFileResponse, ::csvservice::ViewFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ViewFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csvservice::ViewFileResponse>* CsvService::Stub::AsyncViewFileRaw(::grpc::ClientContext* context, const ::csvservice::ViewFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncViewFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CsvService::Stub::ComputeSum(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest& request, ::csvservice::NumericResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csvservice::ColumnOperationRequest, ::csvservice::NumericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ComputeSum_, context, request, response);
}

void CsvService::Stub::async::ComputeSum(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest* request, ::csvservice::NumericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csvservice::ColumnOperationRequest, ::csvservice::NumericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ComputeSum_, context, request, response, std::move(f));
}

void CsvService::Stub::async::ComputeSum(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest* request, ::csvservice::NumericResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ComputeSum_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csvservice::NumericResponse>* CsvService::Stub::PrepareAsyncComputeSumRaw(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csvservice::NumericResponse, ::csvservice::ColumnOperationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ComputeSum_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csvservice::NumericResponse>* CsvService::Stub::AsyncComputeSumRaw(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncComputeSumRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CsvService::Stub::ComputeAverage(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest& request, ::csvservice::NumericResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csvservice::ColumnOperationRequest, ::csvservice::NumericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ComputeAverage_, context, request, response);
}

void CsvService::Stub::async::ComputeAverage(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest* request, ::csvservice::NumericResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csvservice::ColumnOperationRequest, ::csvservice::NumericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ComputeAverage_, context, request, response, std::move(f));
}

void CsvService::Stub::async::ComputeAverage(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest* request, ::csvservice::NumericResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ComputeAverage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csvservice::NumericResponse>* CsvService::Stub::PrepareAsyncComputeAverageRaw(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csvservice::NumericResponse, ::csvservice::ColumnOperationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ComputeAverage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csvservice::NumericResponse>* CsvService::Stub::AsyncComputeAverageRaw(::grpc::ClientContext* context, const ::csvservice::ColumnOperationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncComputeAverageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CsvService::Stub::InsertRow(::grpc::ClientContext* context, const ::csvservice::InsertRowRequest& request, ::csvservice::ModificationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csvservice::InsertRowRequest, ::csvservice::ModificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InsertRow_, context, request, response);
}

void CsvService::Stub::async::InsertRow(::grpc::ClientContext* context, const ::csvservice::InsertRowRequest* request, ::csvservice::ModificationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csvservice::InsertRowRequest, ::csvservice::ModificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertRow_, context, request, response, std::move(f));
}

void CsvService::Stub::async::InsertRow(::grpc::ClientContext* context, const ::csvservice::InsertRowRequest* request, ::csvservice::ModificationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertRow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csvservice::ModificationResponse>* CsvService::Stub::PrepareAsyncInsertRowRaw(::grpc::ClientContext* context, const ::csvservice::InsertRowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csvservice::ModificationResponse, ::csvservice::InsertRowRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InsertRow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csvservice::ModificationResponse>* CsvService::Stub::AsyncInsertRowRaw(::grpc::ClientContext* context, const ::csvservice::InsertRowRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInsertRowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CsvService::Stub::DeleteRow(::grpc::ClientContext* context, const ::csvservice::DeleteRowRequest& request, ::csvservice::ModificationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::csvservice::DeleteRowRequest, ::csvservice::ModificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteRow_, context, request, response);
}

void CsvService::Stub::async::DeleteRow(::grpc::ClientContext* context, const ::csvservice::DeleteRowRequest* request, ::csvservice::ModificationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::csvservice::DeleteRowRequest, ::csvservice::ModificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRow_, context, request, response, std::move(f));
}

void CsvService::Stub::async::DeleteRow(::grpc::ClientContext* context, const ::csvservice::DeleteRowRequest* request, ::csvservice::ModificationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::csvservice::ModificationResponse>* CsvService::Stub::PrepareAsyncDeleteRowRaw(::grpc::ClientContext* context, const ::csvservice::DeleteRowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::csvservice::ModificationResponse, ::csvservice::DeleteRowRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteRow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::csvservice::ModificationResponse>* CsvService::Stub::AsyncDeleteRowRaw(::grpc::ClientContext* context, const ::csvservice::DeleteRowRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRowRaw(context, request, cq);
  result->StartCall();
  return result;
}

CsvService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CsvService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CsvService::Service, ::csvservice::CsvUploadRequest, ::csvservice::CsvUploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CsvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csvservice::CsvUploadRequest* req,
             ::csvservice::CsvUploadResponse* resp) {
               return service->UploadCsv(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CsvService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CsvService::Service, ::csvservice::Empty, ::csvservice::CsvFileList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CsvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csvservice::Empty* req,
             ::csvservice::CsvFileList* resp) {
               return service->ListLoadedFiles(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CsvService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CsvService::Service, ::csvservice::ViewFileRequest, ::csvservice::ViewFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CsvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csvservice::ViewFileRequest* req,
             ::csvservice::ViewFileResponse* resp) {
               return service->ViewFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CsvService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CsvService::Service, ::csvservice::ColumnOperationRequest, ::csvservice::NumericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CsvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csvservice::ColumnOperationRequest* req,
             ::csvservice::NumericResponse* resp) {
               return service->ComputeSum(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CsvService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CsvService::Service, ::csvservice::ColumnOperationRequest, ::csvservice::NumericResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CsvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csvservice::ColumnOperationRequest* req,
             ::csvservice::NumericResponse* resp) {
               return service->ComputeAverage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CsvService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CsvService::Service, ::csvservice::InsertRowRequest, ::csvservice::ModificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CsvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csvservice::InsertRowRequest* req,
             ::csvservice::ModificationResponse* resp) {
               return service->InsertRow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CsvService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CsvService::Service, ::csvservice::DeleteRowRequest, ::csvservice::ModificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CsvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csvservice::DeleteRowRequest* req,
             ::csvservice::ModificationResponse* resp) {
               return service->DeleteRow(ctx, req, resp);
             }, this)));
}

CsvService::Service::~Service() {
}

::grpc::Status CsvService::Service::UploadCsv(::grpc::ServerContext* context, const ::csvservice::CsvUploadRequest* request, ::csvservice::CsvUploadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CsvService::Service::ListLoadedFiles(::grpc::ServerContext* context, const ::csvservice::Empty* request, ::csvservice::CsvFileList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CsvService::Service::ViewFile(::grpc::ServerContext* context, const ::csvservice::ViewFileRequest* request, ::csvservice::ViewFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CsvService::Service::ComputeSum(::grpc::ServerContext* context, const ::csvservice::ColumnOperationRequest* request, ::csvservice::NumericResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CsvService::Service::ComputeAverage(::grpc::ServerContext* context, const ::csvservice::ColumnOperationRequest* request, ::csvservice::NumericResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CsvService::Service::InsertRow(::grpc::ServerContext* context, const ::csvservice::InsertRowRequest* request, ::csvservice::ModificationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CsvService::Service::DeleteRow(::grpc::ServerContext* context, const ::csvservice::DeleteRowRequest* request, ::csvservice::ModificationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace csvservice

