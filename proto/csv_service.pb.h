// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: csv_service.proto
// Protobuf C++ Version: 5.29.3

#ifndef csv_5fservice_2eproto_2epb_2eh
#define csv_5fservice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_csv_5fservice_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_csv_5fservice_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_csv_5fservice_2eproto;
namespace csvservice {
class CsvFileList;
struct CsvFileListDefaultTypeInternal;
extern CsvFileListDefaultTypeInternal _CsvFileList_default_instance_;
class CsvUploadRequest;
struct CsvUploadRequestDefaultTypeInternal;
extern CsvUploadRequestDefaultTypeInternal _CsvUploadRequest_default_instance_;
class CsvUploadResponse;
struct CsvUploadResponseDefaultTypeInternal;
extern CsvUploadResponseDefaultTypeInternal _CsvUploadResponse_default_instance_;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
}  // namespace csvservice
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace csvservice {

// ===================================================================


// -------------------------------------------------------------------

class Empty final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:csvservice.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Empty* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Empty));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Empty(
      ::google::protobuf::internal::ConstantInitialized);

  inline Empty(const Empty& from) : Empty(nullptr, from) {}
  inline Empty(Empty&& from) noexcept
      : Empty(nullptr, std::move(from)) {}
  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
        &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Empty& a, Empty& b) { a.Swap(&b); }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Empty>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.Empty"; }

 protected:
  explicit Empty(::google::protobuf::Arena* arena);
  Empty(::google::protobuf::Arena* arena, const Empty& from);
  Empty(::google::protobuf::Arena* arena, Empty&& from) noexcept
      : Empty(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:csvservice.Empty)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Empty& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_csv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CsvUploadResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.CsvUploadResponse) */ {
 public:
  inline CsvUploadResponse() : CsvUploadResponse(nullptr) {}
  ~CsvUploadResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CsvUploadResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CsvUploadResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CsvUploadResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CsvUploadResponse(const CsvUploadResponse& from) : CsvUploadResponse(nullptr, from) {}
  inline CsvUploadResponse(CsvUploadResponse&& from) noexcept
      : CsvUploadResponse(nullptr, std::move(from)) {}
  inline CsvUploadResponse& operator=(const CsvUploadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsvUploadResponse& operator=(CsvUploadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CsvUploadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CsvUploadResponse* internal_default_instance() {
    return reinterpret_cast<const CsvUploadResponse*>(
        &_CsvUploadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(CsvUploadResponse& a, CsvUploadResponse& b) { a.Swap(&b); }
  inline void Swap(CsvUploadResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CsvUploadResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CsvUploadResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CsvUploadResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CsvUploadResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CsvUploadResponse& from) { CsvUploadResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CsvUploadResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.CsvUploadResponse"; }

 protected:
  explicit CsvUploadResponse(::google::protobuf::Arena* arena);
  CsvUploadResponse(::google::protobuf::Arena* arena, const CsvUploadResponse& from);
  CsvUploadResponse(::google::protobuf::Arena* arena, CsvUploadResponse&& from) noexcept
      : CsvUploadResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
    kRowCountFieldNumber = 3,
    kColumnCountFieldNumber = 4,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // int32 row_count = 3;
  void clear_row_count() ;
  ::int32_t row_count() const;
  void set_row_count(::int32_t value);

  private:
  ::int32_t _internal_row_count() const;
  void _internal_set_row_count(::int32_t value);

  public:
  // int32 column_count = 4;
  void clear_column_count() ;
  ::int32_t column_count() const;
  void set_column_count(::int32_t value);

  private:
  ::int32_t _internal_column_count() const;
  void _internal_set_column_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:csvservice.CsvUploadResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CsvUploadResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::int32_t row_count_;
    ::int32_t column_count_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_csv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CsvUploadRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.CsvUploadRequest) */ {
 public:
  inline CsvUploadRequest() : CsvUploadRequest(nullptr) {}
  ~CsvUploadRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CsvUploadRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CsvUploadRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CsvUploadRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CsvUploadRequest(const CsvUploadRequest& from) : CsvUploadRequest(nullptr, from) {}
  inline CsvUploadRequest(CsvUploadRequest&& from) noexcept
      : CsvUploadRequest(nullptr, std::move(from)) {}
  inline CsvUploadRequest& operator=(const CsvUploadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsvUploadRequest& operator=(CsvUploadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CsvUploadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CsvUploadRequest* internal_default_instance() {
    return reinterpret_cast<const CsvUploadRequest*>(
        &_CsvUploadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(CsvUploadRequest& a, CsvUploadRequest& b) { a.Swap(&b); }
  inline void Swap(CsvUploadRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CsvUploadRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CsvUploadRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CsvUploadRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CsvUploadRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CsvUploadRequest& from) { CsvUploadRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CsvUploadRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.CsvUploadRequest"; }

 protected:
  explicit CsvUploadRequest(::google::protobuf::Arena* arena);
  CsvUploadRequest(::google::protobuf::Arena* arena, const CsvUploadRequest& from);
  CsvUploadRequest(::google::protobuf::Arena* arena, CsvUploadRequest&& from) noexcept
      : CsvUploadRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilenameFieldNumber = 1,
    kCsvDataFieldNumber = 2,
  };
  // string filename = 1;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // bytes csv_data = 2;
  void clear_csv_data() ;
  const std::string& csv_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_csv_data(Arg_&& arg, Args_... args);
  std::string* mutable_csv_data();
  PROTOBUF_NODISCARD std::string* release_csv_data();
  void set_allocated_csv_data(std::string* value);

  private:
  const std::string& _internal_csv_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_csv_data(
      const std::string& value);
  std::string* _internal_mutable_csv_data();

  public:
  // @@protoc_insertion_point(class_scope:csvservice.CsvUploadRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CsvUploadRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::google::protobuf::internal::ArenaStringPtr csv_data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_csv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CsvFileList final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.CsvFileList) */ {
 public:
  inline CsvFileList() : CsvFileList(nullptr) {}
  ~CsvFileList() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CsvFileList* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CsvFileList));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CsvFileList(
      ::google::protobuf::internal::ConstantInitialized);

  inline CsvFileList(const CsvFileList& from) : CsvFileList(nullptr, from) {}
  inline CsvFileList(CsvFileList&& from) noexcept
      : CsvFileList(nullptr, std::move(from)) {}
  inline CsvFileList& operator=(const CsvFileList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsvFileList& operator=(CsvFileList&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CsvFileList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CsvFileList* internal_default_instance() {
    return reinterpret_cast<const CsvFileList*>(
        &_CsvFileList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CsvFileList& a, CsvFileList& b) { a.Swap(&b); }
  inline void Swap(CsvFileList* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CsvFileList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CsvFileList* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CsvFileList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CsvFileList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CsvFileList& from) { CsvFileList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CsvFileList* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.CsvFileList"; }

 protected:
  explicit CsvFileList(::google::protobuf::Arena* arena);
  CsvFileList(::google::protobuf::Arena* arena, const CsvFileList& from);
  CsvFileList(::google::protobuf::Arena* arena, CsvFileList&& from) noexcept
      : CsvFileList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilenamesFieldNumber = 1,
  };
  // repeated string filenames = 1;
  int filenames_size() const;
  private:
  int _internal_filenames_size() const;

  public:
  void clear_filenames() ;
  const std::string& filenames(int index) const;
  std::string* mutable_filenames(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filenames(int index, Arg_&& value, Args_... args);
  std::string* add_filenames();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_filenames(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& filenames() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_filenames();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_filenames() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_filenames();

  public:
  // @@protoc_insertion_point(class_scope:csvservice.CsvFileList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CsvFileList& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> filenames_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_csv_5fservice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CsvUploadRequest

// string filename = 1;
inline void CsvUploadRequest::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& CsvUploadRequest::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.CsvUploadRequest.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CsvUploadRequest::set_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csvservice.CsvUploadRequest.filename)
}
inline std::string* CsvUploadRequest::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:csvservice.CsvUploadRequest.filename)
  return _s;
}
inline const std::string& CsvUploadRequest::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void CsvUploadRequest::_internal_set_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* CsvUploadRequest::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* CsvUploadRequest::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.CsvUploadRequest.filename)
  return _impl_.filename_.Release();
}
inline void CsvUploadRequest::set_allocated_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csvservice.CsvUploadRequest.filename)
}

// bytes csv_data = 2;
inline void CsvUploadRequest::clear_csv_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.csv_data_.ClearToEmpty();
}
inline const std::string& CsvUploadRequest::csv_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.CsvUploadRequest.csv_data)
  return _internal_csv_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CsvUploadRequest::set_csv_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.csv_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csvservice.CsvUploadRequest.csv_data)
}
inline std::string* CsvUploadRequest::mutable_csv_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_csv_data();
  // @@protoc_insertion_point(field_mutable:csvservice.CsvUploadRequest.csv_data)
  return _s;
}
inline const std::string& CsvUploadRequest::_internal_csv_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.csv_data_.Get();
}
inline void CsvUploadRequest::_internal_set_csv_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.csv_data_.Set(value, GetArena());
}
inline std::string* CsvUploadRequest::_internal_mutable_csv_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.csv_data_.Mutable( GetArena());
}
inline std::string* CsvUploadRequest::release_csv_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.CsvUploadRequest.csv_data)
  return _impl_.csv_data_.Release();
}
inline void CsvUploadRequest::set_allocated_csv_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.csv_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.csv_data_.IsDefault()) {
    _impl_.csv_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csvservice.CsvUploadRequest.csv_data)
}

// -------------------------------------------------------------------

// CsvUploadResponse

// bool success = 1;
inline void CsvUploadResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool CsvUploadResponse::success() const {
  // @@protoc_insertion_point(field_get:csvservice.CsvUploadResponse.success)
  return _internal_success();
}
inline void CsvUploadResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:csvservice.CsvUploadResponse.success)
}
inline bool CsvUploadResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void CsvUploadResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void CsvUploadResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& CsvUploadResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.CsvUploadResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CsvUploadResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csvservice.CsvUploadResponse.message)
}
inline std::string* CsvUploadResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:csvservice.CsvUploadResponse.message)
  return _s;
}
inline const std::string& CsvUploadResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void CsvUploadResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* CsvUploadResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* CsvUploadResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.CsvUploadResponse.message)
  return _impl_.message_.Release();
}
inline void CsvUploadResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csvservice.CsvUploadResponse.message)
}

// int32 row_count = 3;
inline void CsvUploadResponse::clear_row_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.row_count_ = 0;
}
inline ::int32_t CsvUploadResponse::row_count() const {
  // @@protoc_insertion_point(field_get:csvservice.CsvUploadResponse.row_count)
  return _internal_row_count();
}
inline void CsvUploadResponse::set_row_count(::int32_t value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:csvservice.CsvUploadResponse.row_count)
}
inline ::int32_t CsvUploadResponse::_internal_row_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.row_count_;
}
inline void CsvUploadResponse::_internal_set_row_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.row_count_ = value;
}

// int32 column_count = 4;
inline void CsvUploadResponse::clear_column_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.column_count_ = 0;
}
inline ::int32_t CsvUploadResponse::column_count() const {
  // @@protoc_insertion_point(field_get:csvservice.CsvUploadResponse.column_count)
  return _internal_column_count();
}
inline void CsvUploadResponse::set_column_count(::int32_t value) {
  _internal_set_column_count(value);
  // @@protoc_insertion_point(field_set:csvservice.CsvUploadResponse.column_count)
}
inline ::int32_t CsvUploadResponse::_internal_column_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.column_count_;
}
inline void CsvUploadResponse::_internal_set_column_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.column_count_ = value;
}

// -------------------------------------------------------------------

// CsvFileList

// repeated string filenames = 1;
inline int CsvFileList::_internal_filenames_size() const {
  return _internal_filenames().size();
}
inline int CsvFileList::filenames_size() const {
  return _internal_filenames_size();
}
inline void CsvFileList::clear_filenames() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filenames_.Clear();
}
inline std::string* CsvFileList::add_filenames() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_filenames()->Add();
  // @@protoc_insertion_point(field_add_mutable:csvservice.CsvFileList.filenames)
  return _s;
}
inline const std::string& CsvFileList::filenames(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.CsvFileList.filenames)
  return _internal_filenames().Get(index);
}
inline std::string* CsvFileList::mutable_filenames(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:csvservice.CsvFileList.filenames)
  return _internal_mutable_filenames()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void CsvFileList::set_filenames(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_filenames()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:csvservice.CsvFileList.filenames)
}
template <typename Arg_, typename... Args_>
inline void CsvFileList::add_filenames(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_filenames(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:csvservice.CsvFileList.filenames)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CsvFileList::filenames() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:csvservice.CsvFileList.filenames)
  return _internal_filenames();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CsvFileList::mutable_filenames() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:csvservice.CsvFileList.filenames)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_filenames();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CsvFileList::_internal_filenames() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filenames_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CsvFileList::_internal_mutable_filenames() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.filenames_;
}

// -------------------------------------------------------------------

// Empty

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace csvservice


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // csv_5fservice_2eproto_2epb_2eh
