// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/csv_service.proto
// Protobuf C++ Version: 5.29.3

#ifndef proto_2fcsv_5fservice_2eproto_2epb_2eh
#define proto_2fcsv_5fservice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2fcsv_5fservice_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fcsv_5fservice_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_proto_2fcsv_5fservice_2eproto;
namespace csvservice {
class AppendEntriesRequest;
struct AppendEntriesRequestDefaultTypeInternal;
extern AppendEntriesRequestDefaultTypeInternal _AppendEntriesRequest_default_instance_;
class AppendEntriesResponse;
struct AppendEntriesResponseDefaultTypeInternal;
extern AppendEntriesResponseDefaultTypeInternal _AppendEntriesResponse_default_instance_;
class ClusterStatusResponse;
struct ClusterStatusResponseDefaultTypeInternal;
extern ClusterStatusResponseDefaultTypeInternal _ClusterStatusResponse_default_instance_;
class ColumnOperationRequest;
struct ColumnOperationRequestDefaultTypeInternal;
extern ColumnOperationRequestDefaultTypeInternal _ColumnOperationRequest_default_instance_;
class CsvFileList;
struct CsvFileListDefaultTypeInternal;
extern CsvFileListDefaultTypeInternal _CsvFileList_default_instance_;
class CsvUploadRequest;
struct CsvUploadRequestDefaultTypeInternal;
extern CsvUploadRequestDefaultTypeInternal _CsvUploadRequest_default_instance_;
class CsvUploadResponse;
struct CsvUploadResponseDefaultTypeInternal;
extern CsvUploadResponseDefaultTypeInternal _CsvUploadResponse_default_instance_;
class DeleteRowRequest;
struct DeleteRowRequestDefaultTypeInternal;
extern DeleteRowRequestDefaultTypeInternal _DeleteRowRequest_default_instance_;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class HeartbeatRequest;
struct HeartbeatRequestDefaultTypeInternal;
extern HeartbeatRequestDefaultTypeInternal _HeartbeatRequest_default_instance_;
class HeartbeatResponse;
struct HeartbeatResponseDefaultTypeInternal;
extern HeartbeatResponseDefaultTypeInternal _HeartbeatResponse_default_instance_;
class InsertRowRequest;
struct InsertRowRequestDefaultTypeInternal;
extern InsertRowRequestDefaultTypeInternal _InsertRowRequest_default_instance_;
class LogEntry;
struct LogEntryDefaultTypeInternal;
extern LogEntryDefaultTypeInternal _LogEntry_default_instance_;
class ModificationResponse;
struct ModificationResponseDefaultTypeInternal;
extern ModificationResponseDefaultTypeInternal _ModificationResponse_default_instance_;
class NumericResponse;
struct NumericResponseDefaultTypeInternal;
extern NumericResponseDefaultTypeInternal _NumericResponse_default_instance_;
class RegisterPeerRequest;
struct RegisterPeerRequestDefaultTypeInternal;
extern RegisterPeerRequestDefaultTypeInternal _RegisterPeerRequest_default_instance_;
class RegisterPeerResponse;
struct RegisterPeerResponseDefaultTypeInternal;
extern RegisterPeerResponseDefaultTypeInternal _RegisterPeerResponse_default_instance_;
class ReplicateMutationRequest;
struct ReplicateMutationRequestDefaultTypeInternal;
extern ReplicateMutationRequestDefaultTypeInternal _ReplicateMutationRequest_default_instance_;
class ReplicateMutationResponse;
struct ReplicateMutationResponseDefaultTypeInternal;
extern ReplicateMutationResponseDefaultTypeInternal _ReplicateMutationResponse_default_instance_;
class ReplicateUploadResponse;
struct ReplicateUploadResponseDefaultTypeInternal;
extern ReplicateUploadResponseDefaultTypeInternal _ReplicateUploadResponse_default_instance_;
class RequestVoteRequest;
struct RequestVoteRequestDefaultTypeInternal;
extern RequestVoteRequestDefaultTypeInternal _RequestVoteRequest_default_instance_;
class RequestVoteResponse;
struct RequestVoteResponseDefaultTypeInternal;
extern RequestVoteResponseDefaultTypeInternal _RequestVoteResponse_default_instance_;
class Row;
struct RowDefaultTypeInternal;
extern RowDefaultTypeInternal _Row_default_instance_;
class RowDeleteMutation;
struct RowDeleteMutationDefaultTypeInternal;
extern RowDeleteMutationDefaultTypeInternal _RowDeleteMutation_default_instance_;
class RowInsertMutation;
struct RowInsertMutationDefaultTypeInternal;
extern RowInsertMutationDefaultTypeInternal _RowInsertMutation_default_instance_;
class ViewFileRequest;
struct ViewFileRequestDefaultTypeInternal;
extern ViewFileRequestDefaultTypeInternal _ViewFileRequest_default_instance_;
class ViewFileResponse;
struct ViewFileResponseDefaultTypeInternal;
extern ViewFileResponseDefaultTypeInternal _ViewFileResponse_default_instance_;
}  // namespace csvservice
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace csvservice {

// ===================================================================


// -------------------------------------------------------------------

class ViewFileRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.ViewFileRequest) */ {
 public:
  inline ViewFileRequest() : ViewFileRequest(nullptr) {}
  ~ViewFileRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ViewFileRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ViewFileRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ViewFileRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ViewFileRequest(const ViewFileRequest& from) : ViewFileRequest(nullptr, from) {}
  inline ViewFileRequest(ViewFileRequest&& from) noexcept
      : ViewFileRequest(nullptr, std::move(from)) {}
  inline ViewFileRequest& operator=(const ViewFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewFileRequest& operator=(ViewFileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewFileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewFileRequest* internal_default_instance() {
    return reinterpret_cast<const ViewFileRequest*>(
        &_ViewFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(ViewFileRequest& a, ViewFileRequest& b) { a.Swap(&b); }
  inline void Swap(ViewFileRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewFileRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewFileRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ViewFileRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ViewFileRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ViewFileRequest& from) { ViewFileRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ViewFileRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.ViewFileRequest"; }

 protected:
  explicit ViewFileRequest(::google::protobuf::Arena* arena);
  ViewFileRequest(::google::protobuf::Arena* arena, const ViewFileRequest& from);
  ViewFileRequest(::google::protobuf::Arena* arena, ViewFileRequest&& from) noexcept
      : ViewFileRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilenameFieldNumber = 1,
  };
  // string filename = 1;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // @@protoc_insertion_point(class_scope:csvservice.ViewFileRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      43, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ViewFileRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RowInsertMutation final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.RowInsertMutation) */ {
 public:
  inline RowInsertMutation() : RowInsertMutation(nullptr) {}
  ~RowInsertMutation() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RowInsertMutation* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RowInsertMutation));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RowInsertMutation(
      ::google::protobuf::internal::ConstantInitialized);

  inline RowInsertMutation(const RowInsertMutation& from) : RowInsertMutation(nullptr, from) {}
  inline RowInsertMutation(RowInsertMutation&& from) noexcept
      : RowInsertMutation(nullptr, std::move(from)) {}
  inline RowInsertMutation& operator=(const RowInsertMutation& from) {
    CopyFrom(from);
    return *this;
  }
  inline RowInsertMutation& operator=(RowInsertMutation&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RowInsertMutation& default_instance() {
    return *internal_default_instance();
  }
  static inline const RowInsertMutation* internal_default_instance() {
    return reinterpret_cast<const RowInsertMutation*>(
        &_RowInsertMutation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(RowInsertMutation& a, RowInsertMutation& b) { a.Swap(&b); }
  inline void Swap(RowInsertMutation* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RowInsertMutation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RowInsertMutation* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RowInsertMutation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RowInsertMutation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RowInsertMutation& from) { RowInsertMutation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RowInsertMutation* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.RowInsertMutation"; }

 protected:
  explicit RowInsertMutation(::google::protobuf::Arena* arena);
  RowInsertMutation(::google::protobuf::Arena* arena, const RowInsertMutation& from);
  RowInsertMutation(::google::protobuf::Arena* arena, RowInsertMutation&& from) noexcept
      : RowInsertMutation(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated string values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_values(int index, Arg_&& value, Args_... args);
  std::string* add_values();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_values(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_values();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_values();

  public:
  // @@protoc_insertion_point(class_scope:csvservice.RowInsertMutation)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      43, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RowInsertMutation& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> values_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RowDeleteMutation final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.RowDeleteMutation) */ {
 public:
  inline RowDeleteMutation() : RowDeleteMutation(nullptr) {}
  ~RowDeleteMutation() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RowDeleteMutation* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RowDeleteMutation));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RowDeleteMutation(
      ::google::protobuf::internal::ConstantInitialized);

  inline RowDeleteMutation(const RowDeleteMutation& from) : RowDeleteMutation(nullptr, from) {}
  inline RowDeleteMutation(RowDeleteMutation&& from) noexcept
      : RowDeleteMutation(nullptr, std::move(from)) {}
  inline RowDeleteMutation& operator=(const RowDeleteMutation& from) {
    CopyFrom(from);
    return *this;
  }
  inline RowDeleteMutation& operator=(RowDeleteMutation&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RowDeleteMutation& default_instance() {
    return *internal_default_instance();
  }
  static inline const RowDeleteMutation* internal_default_instance() {
    return reinterpret_cast<const RowDeleteMutation*>(
        &_RowDeleteMutation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(RowDeleteMutation& a, RowDeleteMutation& b) { a.Swap(&b); }
  inline void Swap(RowDeleteMutation* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RowDeleteMutation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RowDeleteMutation* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RowDeleteMutation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RowDeleteMutation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RowDeleteMutation& from) { RowDeleteMutation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RowDeleteMutation* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.RowDeleteMutation"; }

 protected:
  explicit RowDeleteMutation(::google::protobuf::Arena* arena);
  RowDeleteMutation(::google::protobuf::Arena* arena, const RowDeleteMutation& from);
  RowDeleteMutation(::google::protobuf::Arena* arena, RowDeleteMutation&& from) noexcept
      : RowDeleteMutation(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRowIndexFieldNumber = 1,
  };
  // int32 row_index = 1;
  void clear_row_index() ;
  ::int32_t row_index() const;
  void set_row_index(::int32_t value);

  private:
  ::int32_t _internal_row_index() const;
  void _internal_set_row_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:csvservice.RowDeleteMutation)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RowDeleteMutation& from_msg);
    ::int32_t row_index_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Row final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.Row) */ {
 public:
  inline Row() : Row(nullptr) {}
  ~Row() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Row* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Row));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Row(
      ::google::protobuf::internal::ConstantInitialized);

  inline Row(const Row& from) : Row(nullptr, from) {}
  inline Row(Row&& from) noexcept
      : Row(nullptr, std::move(from)) {}
  inline Row& operator=(const Row& from) {
    CopyFrom(from);
    return *this;
  }
  inline Row& operator=(Row&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Row& default_instance() {
    return *internal_default_instance();
  }
  static inline const Row* internal_default_instance() {
    return reinterpret_cast<const Row*>(
        &_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(Row& a, Row& b) { a.Swap(&b); }
  inline void Swap(Row* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Row* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Row* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Row>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Row& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Row& from) { Row::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Row* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.Row"; }

 protected:
  explicit Row(::google::protobuf::Arena* arena);
  Row(::google::protobuf::Arena* arena, const Row& from);
  Row(::google::protobuf::Arena* arena, Row&& from) noexcept
      : Row(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated string values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_values(int index, Arg_&& value, Args_... args);
  std::string* add_values();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_values(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_values();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_values();

  public:
  // @@protoc_insertion_point(class_scope:csvservice.Row)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      29, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Row& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> values_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.RequestVoteResponse) */ {
 public:
  inline RequestVoteResponse() : RequestVoteResponse(nullptr) {}
  ~RequestVoteResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RequestVoteResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RequestVoteResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestVoteResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequestVoteResponse(const RequestVoteResponse& from) : RequestVoteResponse(nullptr, from) {}
  inline RequestVoteResponse(RequestVoteResponse&& from) noexcept
      : RequestVoteResponse(nullptr, std::move(from)) {}
  inline RequestVoteResponse& operator=(const RequestVoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteResponse& operator=(RequestVoteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestVoteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestVoteResponse* internal_default_instance() {
    return reinterpret_cast<const RequestVoteResponse*>(
        &_RequestVoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 26;
  friend void swap(RequestVoteResponse& a, RequestVoteResponse& b) { a.Swap(&b); }
  inline void Swap(RequestVoteResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestVoteResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RequestVoteResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestVoteResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RequestVoteResponse& from) { RequestVoteResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RequestVoteResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.RequestVoteResponse"; }

 protected:
  explicit RequestVoteResponse(::google::protobuf::Arena* arena);
  RequestVoteResponse(::google::protobuf::Arena* arena, const RequestVoteResponse& from);
  RequestVoteResponse(::google::protobuf::Arena* arena, RequestVoteResponse&& from) noexcept
      : RequestVoteResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTermFieldNumber = 1,
    kVoteGrantedFieldNumber = 2,
  };
  // uint64 term = 1;
  void clear_term() ;
  ::uint64_t term() const;
  void set_term(::uint64_t value);

  private:
  ::uint64_t _internal_term() const;
  void _internal_set_term(::uint64_t value);

  public:
  // bool vote_granted = 2;
  void clear_vote_granted() ;
  bool vote_granted() const;
  void set_vote_granted(bool value);

  private:
  bool _internal_vote_granted() const;
  void _internal_set_vote_granted(bool value);

  public:
  // @@protoc_insertion_point(class_scope:csvservice.RequestVoteResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RequestVoteResponse& from_msg);
    ::uint64_t term_;
    bool vote_granted_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.RequestVoteRequest) */ {
 public:
  inline RequestVoteRequest() : RequestVoteRequest(nullptr) {}
  ~RequestVoteRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RequestVoteRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RequestVoteRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestVoteRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequestVoteRequest(const RequestVoteRequest& from) : RequestVoteRequest(nullptr, from) {}
  inline RequestVoteRequest(RequestVoteRequest&& from) noexcept
      : RequestVoteRequest(nullptr, std::move(from)) {}
  inline RequestVoteRequest& operator=(const RequestVoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteRequest& operator=(RequestVoteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestVoteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestVoteRequest* internal_default_instance() {
    return reinterpret_cast<const RequestVoteRequest*>(
        &_RequestVoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 25;
  friend void swap(RequestVoteRequest& a, RequestVoteRequest& b) { a.Swap(&b); }
  inline void Swap(RequestVoteRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestVoteRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RequestVoteRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestVoteRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RequestVoteRequest& from) { RequestVoteRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RequestVoteRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.RequestVoteRequest"; }

 protected:
  explicit RequestVoteRequest(::google::protobuf::Arena* arena);
  RequestVoteRequest(::google::protobuf::Arena* arena, const RequestVoteRequest& from);
  RequestVoteRequest(::google::protobuf::Arena* arena, RequestVoteRequest&& from) noexcept
      : RequestVoteRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCandidateIdFieldNumber = 2,
    kTermFieldNumber = 1,
    kLastLogIndexFieldNumber = 3,
    kLastLogTermFieldNumber = 4,
  };
  // string candidate_id = 2;
  void clear_candidate_id() ;
  const std::string& candidate_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_candidate_id(Arg_&& arg, Args_... args);
  std::string* mutable_candidate_id();
  PROTOBUF_NODISCARD std::string* release_candidate_id();
  void set_allocated_candidate_id(std::string* value);

  private:
  const std::string& _internal_candidate_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_candidate_id(
      const std::string& value);
  std::string* _internal_mutable_candidate_id();

  public:
  // uint64 term = 1;
  void clear_term() ;
  ::uint64_t term() const;
  void set_term(::uint64_t value);

  private:
  ::uint64_t _internal_term() const;
  void _internal_set_term(::uint64_t value);

  public:
  // uint64 last_log_index = 3;
  void clear_last_log_index() ;
  ::uint64_t last_log_index() const;
  void set_last_log_index(::uint64_t value);

  private:
  ::uint64_t _internal_last_log_index() const;
  void _internal_set_last_log_index(::uint64_t value);

  public:
  // uint64 last_log_term = 4;
  void clear_last_log_term() ;
  ::uint64_t last_log_term() const;
  void set_last_log_term(::uint64_t value);

  private:
  ::uint64_t _internal_last_log_term() const;
  void _internal_set_last_log_term(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:csvservice.RequestVoteRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      50, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RequestVoteRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr candidate_id_;
    ::uint64_t term_;
    ::uint64_t last_log_index_;
    ::uint64_t last_log_term_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ReplicateUploadResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.ReplicateUploadResponse) */ {
 public:
  inline ReplicateUploadResponse() : ReplicateUploadResponse(nullptr) {}
  ~ReplicateUploadResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReplicateUploadResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReplicateUploadResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReplicateUploadResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReplicateUploadResponse(const ReplicateUploadResponse& from) : ReplicateUploadResponse(nullptr, from) {}
  inline ReplicateUploadResponse(ReplicateUploadResponse&& from) noexcept
      : ReplicateUploadResponse(nullptr, std::move(from)) {}
  inline ReplicateUploadResponse& operator=(const ReplicateUploadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicateUploadResponse& operator=(ReplicateUploadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplicateUploadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplicateUploadResponse* internal_default_instance() {
    return reinterpret_cast<const ReplicateUploadResponse*>(
        &_ReplicateUploadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(ReplicateUploadResponse& a, ReplicateUploadResponse& b) { a.Swap(&b); }
  inline void Swap(ReplicateUploadResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicateUploadResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplicateUploadResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReplicateUploadResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReplicateUploadResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReplicateUploadResponse& from) { ReplicateUploadResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReplicateUploadResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.ReplicateUploadResponse"; }

 protected:
  explicit ReplicateUploadResponse(::google::protobuf::Arena* arena);
  ReplicateUploadResponse(::google::protobuf::Arena* arena, const ReplicateUploadResponse& from);
  ReplicateUploadResponse(::google::protobuf::Arena* arena, ReplicateUploadResponse&& from) noexcept
      : ReplicateUploadResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:csvservice.ReplicateUploadResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      50, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReplicateUploadResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ReplicateMutationResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.ReplicateMutationResponse) */ {
 public:
  inline ReplicateMutationResponse() : ReplicateMutationResponse(nullptr) {}
  ~ReplicateMutationResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReplicateMutationResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReplicateMutationResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReplicateMutationResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReplicateMutationResponse(const ReplicateMutationResponse& from) : ReplicateMutationResponse(nullptr, from) {}
  inline ReplicateMutationResponse(ReplicateMutationResponse&& from) noexcept
      : ReplicateMutationResponse(nullptr, std::move(from)) {}
  inline ReplicateMutationResponse& operator=(const ReplicateMutationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicateMutationResponse& operator=(ReplicateMutationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplicateMutationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplicateMutationResponse* internal_default_instance() {
    return reinterpret_cast<const ReplicateMutationResponse*>(
        &_ReplicateMutationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(ReplicateMutationResponse& a, ReplicateMutationResponse& b) { a.Swap(&b); }
  inline void Swap(ReplicateMutationResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicateMutationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplicateMutationResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReplicateMutationResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReplicateMutationResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReplicateMutationResponse& from) { ReplicateMutationResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReplicateMutationResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.ReplicateMutationResponse"; }

 protected:
  explicit ReplicateMutationResponse(::google::protobuf::Arena* arena);
  ReplicateMutationResponse(::google::protobuf::Arena* arena, const ReplicateMutationResponse& from);
  ReplicateMutationResponse(::google::protobuf::Arena* arena, ReplicateMutationResponse&& from) noexcept
      : ReplicateMutationResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:csvservice.ReplicateMutationResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReplicateMutationResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RegisterPeerResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.RegisterPeerResponse) */ {
 public:
  inline RegisterPeerResponse() : RegisterPeerResponse(nullptr) {}
  ~RegisterPeerResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RegisterPeerResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RegisterPeerResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RegisterPeerResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline RegisterPeerResponse(const RegisterPeerResponse& from) : RegisterPeerResponse(nullptr, from) {}
  inline RegisterPeerResponse(RegisterPeerResponse&& from) noexcept
      : RegisterPeerResponse(nullptr, std::move(from)) {}
  inline RegisterPeerResponse& operator=(const RegisterPeerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterPeerResponse& operator=(RegisterPeerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterPeerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterPeerResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterPeerResponse*>(
        &_RegisterPeerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(RegisterPeerResponse& a, RegisterPeerResponse& b) { a.Swap(&b); }
  inline void Swap(RegisterPeerResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterPeerResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterPeerResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RegisterPeerResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RegisterPeerResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RegisterPeerResponse& from) { RegisterPeerResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RegisterPeerResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.RegisterPeerResponse"; }

 protected:
  explicit RegisterPeerResponse(::google::protobuf::Arena* arena);
  RegisterPeerResponse(::google::protobuf::Arena* arena, const RegisterPeerResponse& from);
  RegisterPeerResponse(::google::protobuf::Arena* arena, RegisterPeerResponse&& from) noexcept
      : RegisterPeerResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kLeaderAddressFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string leader_address = 3;
  void clear_leader_address() ;
  const std::string& leader_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_leader_address(Arg_&& arg, Args_... args);
  std::string* mutable_leader_address();
  PROTOBUF_NODISCARD std::string* release_leader_address();
  void set_allocated_leader_address(std::string* value);

  private:
  const std::string& _internal_leader_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leader_address(
      const std::string& value);
  std::string* _internal_mutable_leader_address();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:csvservice.RegisterPeerResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      61, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RegisterPeerResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr leader_address_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RegisterPeerRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.RegisterPeerRequest) */ {
 public:
  inline RegisterPeerRequest() : RegisterPeerRequest(nullptr) {}
  ~RegisterPeerRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RegisterPeerRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RegisterPeerRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RegisterPeerRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline RegisterPeerRequest(const RegisterPeerRequest& from) : RegisterPeerRequest(nullptr, from) {}
  inline RegisterPeerRequest(RegisterPeerRequest&& from) noexcept
      : RegisterPeerRequest(nullptr, std::move(from)) {}
  inline RegisterPeerRequest& operator=(const RegisterPeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterPeerRequest& operator=(RegisterPeerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterPeerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterPeerRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterPeerRequest*>(
        &_RegisterPeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(RegisterPeerRequest& a, RegisterPeerRequest& b) { a.Swap(&b); }
  inline void Swap(RegisterPeerRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterPeerRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterPeerRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RegisterPeerRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RegisterPeerRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RegisterPeerRequest& from) { RegisterPeerRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RegisterPeerRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.RegisterPeerRequest"; }

 protected:
  explicit RegisterPeerRequest(::google::protobuf::Arena* arena);
  RegisterPeerRequest(::google::protobuf::Arena* arena, const RegisterPeerRequest& from);
  RegisterPeerRequest(::google::protobuf::Arena* arena, RegisterPeerRequest&& from) noexcept
      : RegisterPeerRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPeerAddressFieldNumber = 1,
  };
  // string peer_address = 1;
  void clear_peer_address() ;
  const std::string& peer_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_peer_address(Arg_&& arg, Args_... args);
  std::string* mutable_peer_address();
  PROTOBUF_NODISCARD std::string* release_peer_address();
  void set_allocated_peer_address(std::string* value);

  private:
  const std::string& _internal_peer_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_peer_address(
      const std::string& value);
  std::string* _internal_mutable_peer_address();

  public:
  // @@protoc_insertion_point(class_scope:csvservice.RegisterPeerRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RegisterPeerRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr peer_address_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class NumericResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.NumericResponse) */ {
 public:
  inline NumericResponse() : NumericResponse(nullptr) {}
  ~NumericResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NumericResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NumericResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NumericResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline NumericResponse(const NumericResponse& from) : NumericResponse(nullptr, from) {}
  inline NumericResponse(NumericResponse&& from) noexcept
      : NumericResponse(nullptr, std::move(from)) {}
  inline NumericResponse& operator=(const NumericResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NumericResponse& operator=(NumericResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NumericResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NumericResponse* internal_default_instance() {
    return reinterpret_cast<const NumericResponse*>(
        &_NumericResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(NumericResponse& a, NumericResponse& b) { a.Swap(&b); }
  inline void Swap(NumericResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NumericResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NumericResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NumericResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NumericResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NumericResponse& from) { NumericResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NumericResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.NumericResponse"; }

 protected:
  explicit NumericResponse(::google::protobuf::Arena* arena);
  NumericResponse(::google::protobuf::Arena* arena, const NumericResponse& from);
  NumericResponse(::google::protobuf::Arena* arena, NumericResponse&& from) noexcept
      : NumericResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kValueFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // double value = 3;
  void clear_value() ;
  double value() const;
  void set_value(double value);

  private:
  double _internal_value() const;
  void _internal_set_value(double value);

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:csvservice.NumericResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      42, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NumericResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    double value_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ModificationResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.ModificationResponse) */ {
 public:
  inline ModificationResponse() : ModificationResponse(nullptr) {}
  ~ModificationResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ModificationResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ModificationResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ModificationResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ModificationResponse(const ModificationResponse& from) : ModificationResponse(nullptr, from) {}
  inline ModificationResponse(ModificationResponse&& from) noexcept
      : ModificationResponse(nullptr, std::move(from)) {}
  inline ModificationResponse& operator=(const ModificationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModificationResponse& operator=(ModificationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModificationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModificationResponse* internal_default_instance() {
    return reinterpret_cast<const ModificationResponse*>(
        &_ModificationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(ModificationResponse& a, ModificationResponse& b) { a.Swap(&b); }
  inline void Swap(ModificationResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModificationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModificationResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ModificationResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModificationResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ModificationResponse& from) { ModificationResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ModificationResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.ModificationResponse"; }

 protected:
  explicit ModificationResponse(::google::protobuf::Arena* arena);
  ModificationResponse(::google::protobuf::Arena* arena, const ModificationResponse& from);
  ModificationResponse(::google::protobuf::Arena* arena, ModificationResponse&& from) noexcept
      : ModificationResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:csvservice.ModificationResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ModificationResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class InsertRowRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.InsertRowRequest) */ {
 public:
  inline InsertRowRequest() : InsertRowRequest(nullptr) {}
  ~InsertRowRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(InsertRowRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(InsertRowRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InsertRowRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline InsertRowRequest(const InsertRowRequest& from) : InsertRowRequest(nullptr, from) {}
  inline InsertRowRequest(InsertRowRequest&& from) noexcept
      : InsertRowRequest(nullptr, std::move(from)) {}
  inline InsertRowRequest& operator=(const InsertRowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertRowRequest& operator=(InsertRowRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InsertRowRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InsertRowRequest* internal_default_instance() {
    return reinterpret_cast<const InsertRowRequest*>(
        &_InsertRowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(InsertRowRequest& a, InsertRowRequest& b) { a.Swap(&b); }
  inline void Swap(InsertRowRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertRowRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InsertRowRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<InsertRowRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InsertRowRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const InsertRowRequest& from) { InsertRowRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(InsertRowRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.InsertRowRequest"; }

 protected:
  explicit InsertRowRequest(::google::protobuf::Arena* arena);
  InsertRowRequest(::google::protobuf::Arena* arena, const InsertRowRequest& from);
  InsertRowRequest(::google::protobuf::Arena* arena, InsertRowRequest&& from) noexcept
      : InsertRowRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 2,
    kFilenameFieldNumber = 1,
  };
  // repeated string values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_values(int index, Arg_&& value, Args_... args);
  std::string* add_values();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_values(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_values();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_values();

  public:
  // string filename = 1;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // @@protoc_insertion_point(class_scope:csvservice.InsertRowRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      50, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const InsertRowRequest& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> values_;
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class HeartbeatResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.HeartbeatResponse) */ {
 public:
  inline HeartbeatResponse() : HeartbeatResponse(nullptr) {}
  ~HeartbeatResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HeartbeatResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HeartbeatResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HeartbeatResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline HeartbeatResponse(const HeartbeatResponse& from) : HeartbeatResponse(nullptr, from) {}
  inline HeartbeatResponse(HeartbeatResponse&& from) noexcept
      : HeartbeatResponse(nullptr, std::move(from)) {}
  inline HeartbeatResponse& operator=(const HeartbeatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatResponse& operator=(HeartbeatResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartbeatResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartbeatResponse* internal_default_instance() {
    return reinterpret_cast<const HeartbeatResponse*>(
        &_HeartbeatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(HeartbeatResponse& a, HeartbeatResponse& b) { a.Swap(&b); }
  inline void Swap(HeartbeatResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartbeatResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HeartbeatResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HeartbeatResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HeartbeatResponse& from) { HeartbeatResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HeartbeatResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.HeartbeatResponse"; }

 protected:
  explicit HeartbeatResponse(::google::protobuf::Arena* arena);
  HeartbeatResponse(::google::protobuf::Arena* arena, const HeartbeatResponse& from);
  HeartbeatResponse(::google::protobuf::Arena* arena, HeartbeatResponse&& from) noexcept
      : HeartbeatResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLeaderAddressFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string leader_address = 2;
  void clear_leader_address() ;
  const std::string& leader_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_leader_address(Arg_&& arg, Args_... args);
  std::string* mutable_leader_address();
  PROTOBUF_NODISCARD std::string* release_leader_address();
  void set_allocated_leader_address(std::string* value);

  private:
  const std::string& _internal_leader_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leader_address(
      const std::string& value);
  std::string* _internal_mutable_leader_address();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:csvservice.HeartbeatResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HeartbeatResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr leader_address_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class HeartbeatRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.HeartbeatRequest) */ {
 public:
  inline HeartbeatRequest() : HeartbeatRequest(nullptr) {}
  ~HeartbeatRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HeartbeatRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HeartbeatRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HeartbeatRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline HeartbeatRequest(const HeartbeatRequest& from) : HeartbeatRequest(nullptr, from) {}
  inline HeartbeatRequest(HeartbeatRequest&& from) noexcept
      : HeartbeatRequest(nullptr, std::move(from)) {}
  inline HeartbeatRequest& operator=(const HeartbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatRequest& operator=(HeartbeatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartbeatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartbeatRequest* internal_default_instance() {
    return reinterpret_cast<const HeartbeatRequest*>(
        &_HeartbeatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(HeartbeatRequest& a, HeartbeatRequest& b) { a.Swap(&b); }
  inline void Swap(HeartbeatRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartbeatRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HeartbeatRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HeartbeatRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HeartbeatRequest& from) { HeartbeatRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HeartbeatRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.HeartbeatRequest"; }

 protected:
  explicit HeartbeatRequest(::google::protobuf::Arena* arena);
  HeartbeatRequest(::google::protobuf::Arena* arena, const HeartbeatRequest& from);
  HeartbeatRequest(::google::protobuf::Arena* arena, HeartbeatRequest&& from) noexcept
      : HeartbeatRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServerAddressFieldNumber = 1,
    kIsLeaderFieldNumber = 2,
  };
  // string server_address = 1;
  void clear_server_address() ;
  const std::string& server_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_server_address(Arg_&& arg, Args_... args);
  std::string* mutable_server_address();
  PROTOBUF_NODISCARD std::string* release_server_address();
  void set_allocated_server_address(std::string* value);

  private:
  const std::string& _internal_server_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_address(
      const std::string& value);
  std::string* _internal_mutable_server_address();

  public:
  // bool is_leader = 2;
  void clear_is_leader() ;
  bool is_leader() const;
  void set_is_leader(bool value);

  private:
  bool _internal_is_leader() const;
  void _internal_set_is_leader(bool value);

  public:
  // @@protoc_insertion_point(class_scope:csvservice.HeartbeatRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      50, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HeartbeatRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr server_address_;
    bool is_leader_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Empty final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:csvservice.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Empty* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Empty));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Empty(
      ::google::protobuf::internal::ConstantInitialized);

  inline Empty(const Empty& from) : Empty(nullptr, from) {}
  inline Empty(Empty&& from) noexcept
      : Empty(nullptr, std::move(from)) {}
  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
        &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Empty& a, Empty& b) { a.Swap(&b); }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Empty>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.Empty"; }

 protected:
  explicit Empty(::google::protobuf::Arena* arena);
  Empty(::google::protobuf::Arena* arena, const Empty& from);
  Empty(::google::protobuf::Arena* arena, Empty&& from) noexcept
      : Empty(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:csvservice.Empty)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Empty& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteRowRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.DeleteRowRequest) */ {
 public:
  inline DeleteRowRequest() : DeleteRowRequest(nullptr) {}
  ~DeleteRowRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DeleteRowRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DeleteRowRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteRowRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeleteRowRequest(const DeleteRowRequest& from) : DeleteRowRequest(nullptr, from) {}
  inline DeleteRowRequest(DeleteRowRequest&& from) noexcept
      : DeleteRowRequest(nullptr, std::move(from)) {}
  inline DeleteRowRequest& operator=(const DeleteRowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRowRequest& operator=(DeleteRowRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRowRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRowRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRowRequest*>(
        &_DeleteRowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(DeleteRowRequest& a, DeleteRowRequest& b) { a.Swap(&b); }
  inline void Swap(DeleteRowRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRowRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteRowRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DeleteRowRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeleteRowRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeleteRowRequest& from) { DeleteRowRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DeleteRowRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.DeleteRowRequest"; }

 protected:
  explicit DeleteRowRequest(::google::protobuf::Arena* arena);
  DeleteRowRequest(::google::protobuf::Arena* arena, const DeleteRowRequest& from);
  DeleteRowRequest(::google::protobuf::Arena* arena, DeleteRowRequest&& from) noexcept
      : DeleteRowRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilenameFieldNumber = 1,
    kRowIndexFieldNumber = 2,
  };
  // string filename = 1;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // int32 row_index = 2;
  void clear_row_index() ;
  ::int32_t row_index() const;
  void set_row_index(::int32_t value);

  private:
  ::int32_t _internal_row_index() const;
  void _internal_set_row_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:csvservice.DeleteRowRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeleteRowRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::int32_t row_index_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CsvUploadResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.CsvUploadResponse) */ {
 public:
  inline CsvUploadResponse() : CsvUploadResponse(nullptr) {}
  ~CsvUploadResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CsvUploadResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CsvUploadResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CsvUploadResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CsvUploadResponse(const CsvUploadResponse& from) : CsvUploadResponse(nullptr, from) {}
  inline CsvUploadResponse(CsvUploadResponse&& from) noexcept
      : CsvUploadResponse(nullptr, std::move(from)) {}
  inline CsvUploadResponse& operator=(const CsvUploadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsvUploadResponse& operator=(CsvUploadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CsvUploadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CsvUploadResponse* internal_default_instance() {
    return reinterpret_cast<const CsvUploadResponse*>(
        &_CsvUploadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(CsvUploadResponse& a, CsvUploadResponse& b) { a.Swap(&b); }
  inline void Swap(CsvUploadResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CsvUploadResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CsvUploadResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CsvUploadResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CsvUploadResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CsvUploadResponse& from) { CsvUploadResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CsvUploadResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.CsvUploadResponse"; }

 protected:
  explicit CsvUploadResponse(::google::protobuf::Arena* arena);
  CsvUploadResponse(::google::protobuf::Arena* arena, const CsvUploadResponse& from);
  CsvUploadResponse(::google::protobuf::Arena* arena, CsvUploadResponse&& from) noexcept
      : CsvUploadResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
    kRowCountFieldNumber = 3,
    kColumnCountFieldNumber = 4,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // int32 row_count = 3;
  void clear_row_count() ;
  ::int32_t row_count() const;
  void set_row_count(::int32_t value);

  private:
  ::int32_t _internal_row_count() const;
  void _internal_set_row_count(::int32_t value);

  public:
  // int32 column_count = 4;
  void clear_column_count() ;
  ::int32_t column_count() const;
  void set_column_count(::int32_t value);

  private:
  ::int32_t _internal_column_count() const;
  void _internal_set_column_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:csvservice.CsvUploadResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CsvUploadResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::int32_t row_count_;
    ::int32_t column_count_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CsvUploadRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.CsvUploadRequest) */ {
 public:
  inline CsvUploadRequest() : CsvUploadRequest(nullptr) {}
  ~CsvUploadRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CsvUploadRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CsvUploadRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CsvUploadRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CsvUploadRequest(const CsvUploadRequest& from) : CsvUploadRequest(nullptr, from) {}
  inline CsvUploadRequest(CsvUploadRequest&& from) noexcept
      : CsvUploadRequest(nullptr, std::move(from)) {}
  inline CsvUploadRequest& operator=(const CsvUploadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsvUploadRequest& operator=(CsvUploadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CsvUploadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CsvUploadRequest* internal_default_instance() {
    return reinterpret_cast<const CsvUploadRequest*>(
        &_CsvUploadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(CsvUploadRequest& a, CsvUploadRequest& b) { a.Swap(&b); }
  inline void Swap(CsvUploadRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CsvUploadRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CsvUploadRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CsvUploadRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CsvUploadRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CsvUploadRequest& from) { CsvUploadRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CsvUploadRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.CsvUploadRequest"; }

 protected:
  explicit CsvUploadRequest(::google::protobuf::Arena* arena);
  CsvUploadRequest(::google::protobuf::Arena* arena, const CsvUploadRequest& from);
  CsvUploadRequest(::google::protobuf::Arena* arena, CsvUploadRequest&& from) noexcept
      : CsvUploadRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilenameFieldNumber = 1,
    kCsvDataFieldNumber = 2,
  };
  // string filename = 1;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // bytes csv_data = 2;
  void clear_csv_data() ;
  const std::string& csv_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_csv_data(Arg_&& arg, Args_... args);
  std::string* mutable_csv_data();
  PROTOBUF_NODISCARD std::string* release_csv_data();
  void set_allocated_csv_data(std::string* value);

  private:
  const std::string& _internal_csv_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_csv_data(
      const std::string& value);
  std::string* _internal_mutable_csv_data();

  public:
  // @@protoc_insertion_point(class_scope:csvservice.CsvUploadRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CsvUploadRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::google::protobuf::internal::ArenaStringPtr csv_data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CsvFileList final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.CsvFileList) */ {
 public:
  inline CsvFileList() : CsvFileList(nullptr) {}
  ~CsvFileList() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CsvFileList* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CsvFileList));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CsvFileList(
      ::google::protobuf::internal::ConstantInitialized);

  inline CsvFileList(const CsvFileList& from) : CsvFileList(nullptr, from) {}
  inline CsvFileList(CsvFileList&& from) noexcept
      : CsvFileList(nullptr, std::move(from)) {}
  inline CsvFileList& operator=(const CsvFileList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsvFileList& operator=(CsvFileList&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CsvFileList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CsvFileList* internal_default_instance() {
    return reinterpret_cast<const CsvFileList*>(
        &_CsvFileList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CsvFileList& a, CsvFileList& b) { a.Swap(&b); }
  inline void Swap(CsvFileList* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CsvFileList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CsvFileList* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CsvFileList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CsvFileList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CsvFileList& from) { CsvFileList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CsvFileList* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.CsvFileList"; }

 protected:
  explicit CsvFileList(::google::protobuf::Arena* arena);
  CsvFileList(::google::protobuf::Arena* arena, const CsvFileList& from);
  CsvFileList(::google::protobuf::Arena* arena, CsvFileList&& from) noexcept
      : CsvFileList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilenamesFieldNumber = 1,
  };
  // repeated string filenames = 1;
  int filenames_size() const;
  private:
  int _internal_filenames_size() const;

  public:
  void clear_filenames() ;
  const std::string& filenames(int index) const;
  std::string* mutable_filenames(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filenames(int index, Arg_&& value, Args_... args);
  std::string* add_filenames();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_filenames(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& filenames() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_filenames();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_filenames() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_filenames();

  public:
  // @@protoc_insertion_point(class_scope:csvservice.CsvFileList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CsvFileList& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> filenames_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ColumnOperationRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.ColumnOperationRequest) */ {
 public:
  inline ColumnOperationRequest() : ColumnOperationRequest(nullptr) {}
  ~ColumnOperationRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ColumnOperationRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ColumnOperationRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ColumnOperationRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ColumnOperationRequest(const ColumnOperationRequest& from) : ColumnOperationRequest(nullptr, from) {}
  inline ColumnOperationRequest(ColumnOperationRequest&& from) noexcept
      : ColumnOperationRequest(nullptr, std::move(from)) {}
  inline ColumnOperationRequest& operator=(const ColumnOperationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnOperationRequest& operator=(ColumnOperationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColumnOperationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColumnOperationRequest* internal_default_instance() {
    return reinterpret_cast<const ColumnOperationRequest*>(
        &_ColumnOperationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(ColumnOperationRequest& a, ColumnOperationRequest& b) { a.Swap(&b); }
  inline void Swap(ColumnOperationRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColumnOperationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColumnOperationRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ColumnOperationRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ColumnOperationRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ColumnOperationRequest& from) { ColumnOperationRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ColumnOperationRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.ColumnOperationRequest"; }

 protected:
  explicit ColumnOperationRequest(::google::protobuf::Arena* arena);
  ColumnOperationRequest(::google::protobuf::Arena* arena, const ColumnOperationRequest& from);
  ColumnOperationRequest(::google::protobuf::Arena* arena, ColumnOperationRequest&& from) noexcept
      : ColumnOperationRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilenameFieldNumber = 1,
    kColumnNameFieldNumber = 2,
  };
  // string filename = 1;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // string column_name = 2;
  void clear_column_name() ;
  const std::string& column_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_column_name(Arg_&& arg, Args_... args);
  std::string* mutable_column_name();
  PROTOBUF_NODISCARD std::string* release_column_name();
  void set_allocated_column_name(std::string* value);

  private:
  const std::string& _internal_column_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_column_name(
      const std::string& value);
  std::string* _internal_mutable_column_name();

  public:
  // @@protoc_insertion_point(class_scope:csvservice.ColumnOperationRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      61, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ColumnOperationRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::google::protobuf::internal::ArenaStringPtr column_name_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ClusterStatusResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.ClusterStatusResponse) */ {
 public:
  inline ClusterStatusResponse() : ClusterStatusResponse(nullptr) {}
  ~ClusterStatusResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ClusterStatusResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ClusterStatusResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ClusterStatusResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ClusterStatusResponse(const ClusterStatusResponse& from) : ClusterStatusResponse(nullptr, from) {}
  inline ClusterStatusResponse(ClusterStatusResponse&& from) noexcept
      : ClusterStatusResponse(nullptr, std::move(from)) {}
  inline ClusterStatusResponse& operator=(const ClusterStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClusterStatusResponse& operator=(ClusterStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClusterStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClusterStatusResponse* internal_default_instance() {
    return reinterpret_cast<const ClusterStatusResponse*>(
        &_ClusterStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(ClusterStatusResponse& a, ClusterStatusResponse& b) { a.Swap(&b); }
  inline void Swap(ClusterStatusResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClusterStatusResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClusterStatusResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ClusterStatusResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClusterStatusResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ClusterStatusResponse& from) { ClusterStatusResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ClusterStatusResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.ClusterStatusResponse"; }

 protected:
  explicit ClusterStatusResponse(::google::protobuf::Arena* arena);
  ClusterStatusResponse(::google::protobuf::Arena* arena, const ClusterStatusResponse& from);
  ClusterStatusResponse(::google::protobuf::Arena* arena, ClusterStatusResponse&& from) noexcept
      : ClusterStatusResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServerAddressesFieldNumber = 4,
    kMessageFieldNumber = 2,
    kLeaderAddressFieldNumber = 3,
    kSuccessFieldNumber = 1,
    kActiveServerCountFieldNumber = 5,
  };
  // repeated string server_addresses = 4;
  int server_addresses_size() const;
  private:
  int _internal_server_addresses_size() const;

  public:
  void clear_server_addresses() ;
  const std::string& server_addresses(int index) const;
  std::string* mutable_server_addresses(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_server_addresses(int index, Arg_&& value, Args_... args);
  std::string* add_server_addresses();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_server_addresses(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& server_addresses() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_server_addresses();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_server_addresses() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_server_addresses();

  public:
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string leader_address = 3;
  void clear_leader_address() ;
  const std::string& leader_address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_leader_address(Arg_&& arg, Args_... args);
  std::string* mutable_leader_address();
  PROTOBUF_NODISCARD std::string* release_leader_address();
  void set_allocated_leader_address(std::string* value);

  private:
  const std::string& _internal_leader_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leader_address(
      const std::string& value);
  std::string* _internal_mutable_leader_address();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // int32 active_server_count = 5;
  void clear_active_server_count() ;
  ::int32_t active_server_count() const;
  void set_active_server_count(::int32_t value);

  private:
  ::int32_t _internal_active_server_count() const;
  void _internal_set_active_server_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:csvservice.ClusterStatusResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      78, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ClusterStatusResponse& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> server_addresses_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr leader_address_;
    bool success_;
    ::int32_t active_server_count_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.AppendEntriesResponse) */ {
 public:
  inline AppendEntriesResponse() : AppendEntriesResponse(nullptr) {}
  ~AppendEntriesResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AppendEntriesResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AppendEntriesResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AppendEntriesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline AppendEntriesResponse(const AppendEntriesResponse& from) : AppendEntriesResponse(nullptr, from) {}
  inline AppendEntriesResponse(AppendEntriesResponse&& from) noexcept
      : AppendEntriesResponse(nullptr, std::move(from)) {}
  inline AppendEntriesResponse& operator=(const AppendEntriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesResponse& operator=(AppendEntriesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendEntriesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendEntriesResponse* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesResponse*>(
        &_AppendEntriesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;
  friend void swap(AppendEntriesResponse& a, AppendEntriesResponse& b) { a.Swap(&b); }
  inline void Swap(AppendEntriesResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendEntriesResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AppendEntriesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AppendEntriesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AppendEntriesResponse& from) { AppendEntriesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AppendEntriesResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.AppendEntriesResponse"; }

 protected:
  explicit AppendEntriesResponse(::google::protobuf::Arena* arena);
  AppendEntriesResponse(::google::protobuf::Arena* arena, const AppendEntriesResponse& from);
  AppendEntriesResponse(::google::protobuf::Arena* arena, AppendEntriesResponse&& from) noexcept
      : AppendEntriesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTermFieldNumber = 1,
    kConflictIndexFieldNumber = 3,
    kConflictTermFieldNumber = 4,
    kSuccessFieldNumber = 2,
  };
  // uint64 term = 1;
  void clear_term() ;
  ::uint64_t term() const;
  void set_term(::uint64_t value);

  private:
  ::uint64_t _internal_term() const;
  void _internal_set_term(::uint64_t value);

  public:
  // uint64 conflict_index = 3;
  void clear_conflict_index() ;
  ::uint64_t conflict_index() const;
  void set_conflict_index(::uint64_t value);

  private:
  ::uint64_t _internal_conflict_index() const;
  void _internal_set_conflict_index(::uint64_t value);

  public:
  // uint64 conflict_term = 4;
  void clear_conflict_term() ;
  ::uint64_t conflict_term() const;
  void set_conflict_term(::uint64_t value);

  private:
  ::uint64_t _internal_conflict_term() const;
  void _internal_set_conflict_term(::uint64_t value);

  public:
  // bool success = 2;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:csvservice.AppendEntriesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AppendEntriesResponse& from_msg);
    ::uint64_t term_;
    ::uint64_t conflict_index_;
    ::uint64_t conflict_term_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ViewFileResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.ViewFileResponse) */ {
 public:
  inline ViewFileResponse() : ViewFileResponse(nullptr) {}
  ~ViewFileResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ViewFileResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ViewFileResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ViewFileResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ViewFileResponse(const ViewFileResponse& from) : ViewFileResponse(nullptr, from) {}
  inline ViewFileResponse(ViewFileResponse&& from) noexcept
      : ViewFileResponse(nullptr, std::move(from)) {}
  inline ViewFileResponse& operator=(const ViewFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewFileResponse& operator=(ViewFileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewFileResponse* internal_default_instance() {
    return reinterpret_cast<const ViewFileResponse*>(
        &_ViewFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(ViewFileResponse& a, ViewFileResponse& b) { a.Swap(&b); }
  inline void Swap(ViewFileResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewFileResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewFileResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ViewFileResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ViewFileResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ViewFileResponse& from) { ViewFileResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ViewFileResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.ViewFileResponse"; }

 protected:
  explicit ViewFileResponse(::google::protobuf::Arena* arena);
  ViewFileResponse(::google::protobuf::Arena* arena, const ViewFileResponse& from);
  ViewFileResponse(::google::protobuf::Arena* arena, ViewFileResponse&& from) noexcept
      : ViewFileResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kColumnNamesFieldNumber = 3,
    kRowsFieldNumber = 4,
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // repeated string column_names = 3;
  int column_names_size() const;
  private:
  int _internal_column_names_size() const;

  public:
  void clear_column_names() ;
  const std::string& column_names(int index) const;
  std::string* mutable_column_names(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_column_names(int index, Arg_&& value, Args_... args);
  std::string* add_column_names();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_column_names(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& column_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_column_names();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_column_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_column_names();

  public:
  // repeated .csvservice.Row rows = 4;
  int rows_size() const;
  private:
  int _internal_rows_size() const;

  public:
  void clear_rows() ;
  ::csvservice::Row* mutable_rows(int index);
  ::google::protobuf::RepeatedPtrField<::csvservice::Row>* mutable_rows();

  private:
  const ::google::protobuf::RepeatedPtrField<::csvservice::Row>& _internal_rows() const;
  ::google::protobuf::RepeatedPtrField<::csvservice::Row>* _internal_mutable_rows();
  public:
  const ::csvservice::Row& rows(int index) const;
  ::csvservice::Row* add_rows();
  const ::google::protobuf::RepeatedPtrField<::csvservice::Row>& rows() const;
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:csvservice.ViewFileResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      55, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ViewFileResponse& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> column_names_;
    ::google::protobuf::RepeatedPtrField< ::csvservice::Row > rows_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ReplicateMutationRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.ReplicateMutationRequest) */ {
 public:
  inline ReplicateMutationRequest() : ReplicateMutationRequest(nullptr) {}
  ~ReplicateMutationRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReplicateMutationRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReplicateMutationRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReplicateMutationRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReplicateMutationRequest(const ReplicateMutationRequest& from) : ReplicateMutationRequest(nullptr, from) {}
  inline ReplicateMutationRequest(ReplicateMutationRequest&& from) noexcept
      : ReplicateMutationRequest(nullptr, std::move(from)) {}
  inline ReplicateMutationRequest& operator=(const ReplicateMutationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicateMutationRequest& operator=(ReplicateMutationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplicateMutationRequest& default_instance() {
    return *internal_default_instance();
  }
  enum MutationTypeCase {
    kRowInsert = 2,
    kRowDelete = 3,
    MUTATION_TYPE_NOT_SET = 0,
  };
  static inline const ReplicateMutationRequest* internal_default_instance() {
    return reinterpret_cast<const ReplicateMutationRequest*>(
        &_ReplicateMutationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(ReplicateMutationRequest& a, ReplicateMutationRequest& b) { a.Swap(&b); }
  inline void Swap(ReplicateMutationRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicateMutationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplicateMutationRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReplicateMutationRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReplicateMutationRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReplicateMutationRequest& from) { ReplicateMutationRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReplicateMutationRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.ReplicateMutationRequest"; }

 protected:
  explicit ReplicateMutationRequest(::google::protobuf::Arena* arena);
  ReplicateMutationRequest(::google::protobuf::Arena* arena, const ReplicateMutationRequest& from);
  ReplicateMutationRequest(::google::protobuf::Arena* arena, ReplicateMutationRequest&& from) noexcept
      : ReplicateMutationRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilenameFieldNumber = 1,
    kRowInsertFieldNumber = 2,
    kRowDeleteFieldNumber = 3,
  };
  // string filename = 1;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // .csvservice.RowInsertMutation row_insert = 2;
  bool has_row_insert() const;
  private:
  bool _internal_has_row_insert() const;

  public:
  void clear_row_insert() ;
  const ::csvservice::RowInsertMutation& row_insert() const;
  PROTOBUF_NODISCARD ::csvservice::RowInsertMutation* release_row_insert();
  ::csvservice::RowInsertMutation* mutable_row_insert();
  void set_allocated_row_insert(::csvservice::RowInsertMutation* value);
  void unsafe_arena_set_allocated_row_insert(::csvservice::RowInsertMutation* value);
  ::csvservice::RowInsertMutation* unsafe_arena_release_row_insert();

  private:
  const ::csvservice::RowInsertMutation& _internal_row_insert() const;
  ::csvservice::RowInsertMutation* _internal_mutable_row_insert();

  public:
  // .csvservice.RowDeleteMutation row_delete = 3;
  bool has_row_delete() const;
  private:
  bool _internal_has_row_delete() const;

  public:
  void clear_row_delete() ;
  const ::csvservice::RowDeleteMutation& row_delete() const;
  PROTOBUF_NODISCARD ::csvservice::RowDeleteMutation* release_row_delete();
  ::csvservice::RowDeleteMutation* mutable_row_delete();
  void set_allocated_row_delete(::csvservice::RowDeleteMutation* value);
  void unsafe_arena_set_allocated_row_delete(::csvservice::RowDeleteMutation* value);
  ::csvservice::RowDeleteMutation* unsafe_arena_release_row_delete();

  private:
  const ::csvservice::RowDeleteMutation& _internal_row_delete() const;
  ::csvservice::RowDeleteMutation* _internal_mutable_row_delete();

  public:
  void clear_mutation_type();
  MutationTypeCase mutation_type_case() const;
  // @@protoc_insertion_point(class_scope:csvservice.ReplicateMutationRequest)
 private:
  class _Internal;
  void set_has_row_insert();
  void set_has_row_delete();
  inline bool has_mutation_type() const;
  inline void clear_has_mutation_type();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 2,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReplicateMutationRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr filename_;
    union MutationTypeUnion {
      constexpr MutationTypeUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::csvservice::RowInsertMutation* row_insert_;
      ::csvservice::RowDeleteMutation* row_delete_;
    } mutation_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LogEntry final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.LogEntry) */ {
 public:
  inline LogEntry() : LogEntry(nullptr) {}
  ~LogEntry() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LogEntry* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LogEntry));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LogEntry(
      ::google::protobuf::internal::ConstantInitialized);

  inline LogEntry(const LogEntry& from) : LogEntry(nullptr, from) {}
  inline LogEntry(LogEntry&& from) noexcept
      : LogEntry(nullptr, std::move(from)) {}
  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntry& operator=(LogEntry&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogEntry* internal_default_instance() {
    return reinterpret_cast<const LogEntry*>(
        &_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(LogEntry& a, LogEntry& b) { a.Swap(&b); }
  inline void Swap(LogEntry* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogEntry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogEntry* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LogEntry>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogEntry& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LogEntry& from) { LogEntry::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LogEntry* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.LogEntry"; }

 protected:
  explicit LogEntry(::google::protobuf::Arena* arena);
  LogEntry(::google::protobuf::Arena* arena, const LogEntry& from);
  LogEntry(::google::protobuf::Arena* arena, LogEntry&& from) noexcept
      : LogEntry(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMutationFieldNumber = 2,
    kTermFieldNumber = 1,
  };
  // .csvservice.ReplicateMutationRequest mutation = 2;
  bool has_mutation() const;
  void clear_mutation() ;
  const ::csvservice::ReplicateMutationRequest& mutation() const;
  PROTOBUF_NODISCARD ::csvservice::ReplicateMutationRequest* release_mutation();
  ::csvservice::ReplicateMutationRequest* mutable_mutation();
  void set_allocated_mutation(::csvservice::ReplicateMutationRequest* value);
  void unsafe_arena_set_allocated_mutation(::csvservice::ReplicateMutationRequest* value);
  ::csvservice::ReplicateMutationRequest* unsafe_arena_release_mutation();

  private:
  const ::csvservice::ReplicateMutationRequest& _internal_mutation() const;
  ::csvservice::ReplicateMutationRequest* _internal_mutable_mutation();

  public:
  // uint64 term = 1;
  void clear_term() ;
  ::uint64_t term() const;
  void set_term(::uint64_t value);

  private:
  ::uint64_t _internal_term() const;
  void _internal_set_term(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:csvservice.LogEntry)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LogEntry& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::csvservice::ReplicateMutationRequest* mutation_;
    ::uint64_t term_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:csvservice.AppendEntriesRequest) */ {
 public:
  inline AppendEntriesRequest() : AppendEntriesRequest(nullptr) {}
  ~AppendEntriesRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AppendEntriesRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AppendEntriesRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AppendEntriesRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline AppendEntriesRequest(const AppendEntriesRequest& from) : AppendEntriesRequest(nullptr, from) {}
  inline AppendEntriesRequest(AppendEntriesRequest&& from) noexcept
      : AppendEntriesRequest(nullptr, std::move(from)) {}
  inline AppendEntriesRequest& operator=(const AppendEntriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesRequest& operator=(AppendEntriesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendEntriesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendEntriesRequest* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesRequest*>(
        &_AppendEntriesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(AppendEntriesRequest& a, AppendEntriesRequest& b) { a.Swap(&b); }
  inline void Swap(AppendEntriesRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendEntriesRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AppendEntriesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AppendEntriesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AppendEntriesRequest& from) { AppendEntriesRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AppendEntriesRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "csvservice.AppendEntriesRequest"; }

 protected:
  explicit AppendEntriesRequest(::google::protobuf::Arena* arena);
  AppendEntriesRequest(::google::protobuf::Arena* arena, const AppendEntriesRequest& from);
  AppendEntriesRequest(::google::protobuf::Arena* arena, AppendEntriesRequest&& from) noexcept
      : AppendEntriesRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEntriesFieldNumber = 5,
    kLeaderIdFieldNumber = 2,
    kTermFieldNumber = 1,
    kPrevLogIndexFieldNumber = 3,
    kPrevLogTermFieldNumber = 4,
    kLeaderCommitFieldNumber = 6,
  };
  // repeated .csvservice.LogEntry entries = 5;
  int entries_size() const;
  private:
  int _internal_entries_size() const;

  public:
  void clear_entries() ;
  ::csvservice::LogEntry* mutable_entries(int index);
  ::google::protobuf::RepeatedPtrField<::csvservice::LogEntry>* mutable_entries();

  private:
  const ::google::protobuf::RepeatedPtrField<::csvservice::LogEntry>& _internal_entries() const;
  ::google::protobuf::RepeatedPtrField<::csvservice::LogEntry>* _internal_mutable_entries();
  public:
  const ::csvservice::LogEntry& entries(int index) const;
  ::csvservice::LogEntry* add_entries();
  const ::google::protobuf::RepeatedPtrField<::csvservice::LogEntry>& entries() const;
  // string leader_id = 2;
  void clear_leader_id() ;
  const std::string& leader_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_leader_id(Arg_&& arg, Args_... args);
  std::string* mutable_leader_id();
  PROTOBUF_NODISCARD std::string* release_leader_id();
  void set_allocated_leader_id(std::string* value);

  private:
  const std::string& _internal_leader_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leader_id(
      const std::string& value);
  std::string* _internal_mutable_leader_id();

  public:
  // uint64 term = 1;
  void clear_term() ;
  ::uint64_t term() const;
  void set_term(::uint64_t value);

  private:
  ::uint64_t _internal_term() const;
  void _internal_set_term(::uint64_t value);

  public:
  // uint64 prev_log_index = 3;
  void clear_prev_log_index() ;
  ::uint64_t prev_log_index() const;
  void set_prev_log_index(::uint64_t value);

  private:
  ::uint64_t _internal_prev_log_index() const;
  void _internal_set_prev_log_index(::uint64_t value);

  public:
  // uint64 prev_log_term = 4;
  void clear_prev_log_term() ;
  ::uint64_t prev_log_term() const;
  void set_prev_log_term(::uint64_t value);

  private:
  ::uint64_t _internal_prev_log_term() const;
  void _internal_set_prev_log_term(::uint64_t value);

  public:
  // uint64 leader_commit = 6;
  void clear_leader_commit() ;
  ::uint64_t leader_commit() const;
  void set_leader_commit(::uint64_t value);

  private:
  ::uint64_t _internal_leader_commit() const;
  void _internal_set_leader_commit(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:csvservice.AppendEntriesRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AppendEntriesRequest& from_msg);
    ::google::protobuf::RepeatedPtrField< ::csvservice::LogEntry > entries_;
    ::google::protobuf::internal::ArenaStringPtr leader_id_;
    ::uint64_t term_;
    ::uint64_t prev_log_index_;
    ::uint64_t prev_log_term_;
    ::uint64_t leader_commit_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcsv_5fservice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CsvUploadRequest

// string filename = 1;
inline void CsvUploadRequest::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& CsvUploadRequest::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.CsvUploadRequest.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CsvUploadRequest::set_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csvservice.CsvUploadRequest.filename)
}
inline std::string* CsvUploadRequest::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:csvservice.CsvUploadRequest.filename)
  return _s;
}
inline const std::string& CsvUploadRequest::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void CsvUploadRequest::_internal_set_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* CsvUploadRequest::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* CsvUploadRequest::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.CsvUploadRequest.filename)
  return _impl_.filename_.Release();
}
inline void CsvUploadRequest::set_allocated_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csvservice.CsvUploadRequest.filename)
}

// bytes csv_data = 2;
inline void CsvUploadRequest::clear_csv_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.csv_data_.ClearToEmpty();
}
inline const std::string& CsvUploadRequest::csv_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.CsvUploadRequest.csv_data)
  return _internal_csv_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CsvUploadRequest::set_csv_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.csv_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csvservice.CsvUploadRequest.csv_data)
}
inline std::string* CsvUploadRequest::mutable_csv_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_csv_data();
  // @@protoc_insertion_point(field_mutable:csvservice.CsvUploadRequest.csv_data)
  return _s;
}
inline const std::string& CsvUploadRequest::_internal_csv_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.csv_data_.Get();
}
inline void CsvUploadRequest::_internal_set_csv_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.csv_data_.Set(value, GetArena());
}
inline std::string* CsvUploadRequest::_internal_mutable_csv_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.csv_data_.Mutable( GetArena());
}
inline std::string* CsvUploadRequest::release_csv_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.CsvUploadRequest.csv_data)
  return _impl_.csv_data_.Release();
}
inline void CsvUploadRequest::set_allocated_csv_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.csv_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.csv_data_.IsDefault()) {
    _impl_.csv_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csvservice.CsvUploadRequest.csv_data)
}

// -------------------------------------------------------------------

// CsvUploadResponse

// bool success = 1;
inline void CsvUploadResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool CsvUploadResponse::success() const {
  // @@protoc_insertion_point(field_get:csvservice.CsvUploadResponse.success)
  return _internal_success();
}
inline void CsvUploadResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:csvservice.CsvUploadResponse.success)
}
inline bool CsvUploadResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void CsvUploadResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void CsvUploadResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& CsvUploadResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.CsvUploadResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CsvUploadResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csvservice.CsvUploadResponse.message)
}
inline std::string* CsvUploadResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:csvservice.CsvUploadResponse.message)
  return _s;
}
inline const std::string& CsvUploadResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void CsvUploadResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* CsvUploadResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* CsvUploadResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.CsvUploadResponse.message)
  return _impl_.message_.Release();
}
inline void CsvUploadResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csvservice.CsvUploadResponse.message)
}

// int32 row_count = 3;
inline void CsvUploadResponse::clear_row_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.row_count_ = 0;
}
inline ::int32_t CsvUploadResponse::row_count() const {
  // @@protoc_insertion_point(field_get:csvservice.CsvUploadResponse.row_count)
  return _internal_row_count();
}
inline void CsvUploadResponse::set_row_count(::int32_t value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:csvservice.CsvUploadResponse.row_count)
}
inline ::int32_t CsvUploadResponse::_internal_row_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.row_count_;
}
inline void CsvUploadResponse::_internal_set_row_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.row_count_ = value;
}

// int32 column_count = 4;
inline void CsvUploadResponse::clear_column_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.column_count_ = 0;
}
inline ::int32_t CsvUploadResponse::column_count() const {
  // @@protoc_insertion_point(field_get:csvservice.CsvUploadResponse.column_count)
  return _internal_column_count();
}
inline void CsvUploadResponse::set_column_count(::int32_t value) {
  _internal_set_column_count(value);
  // @@protoc_insertion_point(field_set:csvservice.CsvUploadResponse.column_count)
}
inline ::int32_t CsvUploadResponse::_internal_column_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.column_count_;
}
inline void CsvUploadResponse::_internal_set_column_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.column_count_ = value;
}

// -------------------------------------------------------------------

// CsvFileList

// repeated string filenames = 1;
inline int CsvFileList::_internal_filenames_size() const {
  return _internal_filenames().size();
}
inline int CsvFileList::filenames_size() const {
  return _internal_filenames_size();
}
inline void CsvFileList::clear_filenames() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filenames_.Clear();
}
inline std::string* CsvFileList::add_filenames() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_filenames()->Add();
  // @@protoc_insertion_point(field_add_mutable:csvservice.CsvFileList.filenames)
  return _s;
}
inline const std::string& CsvFileList::filenames(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.CsvFileList.filenames)
  return _internal_filenames().Get(index);
}
inline std::string* CsvFileList::mutable_filenames(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:csvservice.CsvFileList.filenames)
  return _internal_mutable_filenames()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void CsvFileList::set_filenames(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_filenames()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:csvservice.CsvFileList.filenames)
}
template <typename Arg_, typename... Args_>
inline void CsvFileList::add_filenames(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_filenames(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:csvservice.CsvFileList.filenames)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CsvFileList::filenames() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:csvservice.CsvFileList.filenames)
  return _internal_filenames();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CsvFileList::mutable_filenames() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:csvservice.CsvFileList.filenames)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_filenames();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CsvFileList::_internal_filenames() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filenames_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CsvFileList::_internal_mutable_filenames() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.filenames_;
}

// -------------------------------------------------------------------

// Empty

// -------------------------------------------------------------------

// ViewFileRequest

// string filename = 1;
inline void ViewFileRequest::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& ViewFileRequest::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.ViewFileRequest.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ViewFileRequest::set_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csvservice.ViewFileRequest.filename)
}
inline std::string* ViewFileRequest::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:csvservice.ViewFileRequest.filename)
  return _s;
}
inline const std::string& ViewFileRequest::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void ViewFileRequest::_internal_set_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* ViewFileRequest::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* ViewFileRequest::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.ViewFileRequest.filename)
  return _impl_.filename_.Release();
}
inline void ViewFileRequest::set_allocated_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csvservice.ViewFileRequest.filename)
}

// -------------------------------------------------------------------

// ViewFileResponse

// bool success = 1;
inline void ViewFileResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool ViewFileResponse::success() const {
  // @@protoc_insertion_point(field_get:csvservice.ViewFileResponse.success)
  return _internal_success();
}
inline void ViewFileResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:csvservice.ViewFileResponse.success)
}
inline bool ViewFileResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void ViewFileResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void ViewFileResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ViewFileResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.ViewFileResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ViewFileResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csvservice.ViewFileResponse.message)
}
inline std::string* ViewFileResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:csvservice.ViewFileResponse.message)
  return _s;
}
inline const std::string& ViewFileResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void ViewFileResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* ViewFileResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* ViewFileResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.ViewFileResponse.message)
  return _impl_.message_.Release();
}
inline void ViewFileResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csvservice.ViewFileResponse.message)
}

// repeated string column_names = 3;
inline int ViewFileResponse::_internal_column_names_size() const {
  return _internal_column_names().size();
}
inline int ViewFileResponse::column_names_size() const {
  return _internal_column_names_size();
}
inline void ViewFileResponse::clear_column_names() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.column_names_.Clear();
}
inline std::string* ViewFileResponse::add_column_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_column_names()->Add();
  // @@protoc_insertion_point(field_add_mutable:csvservice.ViewFileResponse.column_names)
  return _s;
}
inline const std::string& ViewFileResponse::column_names(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.ViewFileResponse.column_names)
  return _internal_column_names().Get(index);
}
inline std::string* ViewFileResponse::mutable_column_names(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:csvservice.ViewFileResponse.column_names)
  return _internal_mutable_column_names()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ViewFileResponse::set_column_names(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_column_names()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:csvservice.ViewFileResponse.column_names)
}
template <typename Arg_, typename... Args_>
inline void ViewFileResponse::add_column_names(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_column_names(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:csvservice.ViewFileResponse.column_names)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ViewFileResponse::column_names() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:csvservice.ViewFileResponse.column_names)
  return _internal_column_names();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ViewFileResponse::mutable_column_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:csvservice.ViewFileResponse.column_names)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_column_names();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ViewFileResponse::_internal_column_names() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.column_names_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ViewFileResponse::_internal_mutable_column_names() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.column_names_;
}

// repeated .csvservice.Row rows = 4;
inline int ViewFileResponse::_internal_rows_size() const {
  return _internal_rows().size();
}
inline int ViewFileResponse::rows_size() const {
  return _internal_rows_size();
}
inline void ViewFileResponse::clear_rows() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rows_.Clear();
}
inline ::csvservice::Row* ViewFileResponse::mutable_rows(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:csvservice.ViewFileResponse.rows)
  return _internal_mutable_rows()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::csvservice::Row>* ViewFileResponse::mutable_rows()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:csvservice.ViewFileResponse.rows)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_rows();
}
inline const ::csvservice::Row& ViewFileResponse::rows(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.ViewFileResponse.rows)
  return _internal_rows().Get(index);
}
inline ::csvservice::Row* ViewFileResponse::add_rows() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::csvservice::Row* _add = _internal_mutable_rows()->Add();
  // @@protoc_insertion_point(field_add:csvservice.ViewFileResponse.rows)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::csvservice::Row>& ViewFileResponse::rows() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:csvservice.ViewFileResponse.rows)
  return _internal_rows();
}
inline const ::google::protobuf::RepeatedPtrField<::csvservice::Row>&
ViewFileResponse::_internal_rows() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rows_;
}
inline ::google::protobuf::RepeatedPtrField<::csvservice::Row>*
ViewFileResponse::_internal_mutable_rows() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.rows_;
}

// -------------------------------------------------------------------

// Row

// repeated string values = 1;
inline int Row::_internal_values_size() const {
  return _internal_values().size();
}
inline int Row::values_size() const {
  return _internal_values_size();
}
inline void Row::clear_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.values_.Clear();
}
inline std::string* Row::add_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add_mutable:csvservice.Row.values)
  return _s;
}
inline const std::string& Row::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.Row.values)
  return _internal_values().Get(index);
}
inline std::string* Row::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:csvservice.Row.values)
  return _internal_mutable_values()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Row::set_values(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_values()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:csvservice.Row.values)
}
template <typename Arg_, typename... Args_>
inline void Row::add_values(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_values(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:csvservice.Row.values)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Row::values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:csvservice.Row.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Row::mutable_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:csvservice.Row.values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_values();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Row::_internal_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Row::_internal_mutable_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// ColumnOperationRequest

// string filename = 1;
inline void ColumnOperationRequest::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& ColumnOperationRequest::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.ColumnOperationRequest.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ColumnOperationRequest::set_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csvservice.ColumnOperationRequest.filename)
}
inline std::string* ColumnOperationRequest::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:csvservice.ColumnOperationRequest.filename)
  return _s;
}
inline const std::string& ColumnOperationRequest::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void ColumnOperationRequest::_internal_set_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* ColumnOperationRequest::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* ColumnOperationRequest::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.ColumnOperationRequest.filename)
  return _impl_.filename_.Release();
}
inline void ColumnOperationRequest::set_allocated_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csvservice.ColumnOperationRequest.filename)
}

// string column_name = 2;
inline void ColumnOperationRequest::clear_column_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.column_name_.ClearToEmpty();
}
inline const std::string& ColumnOperationRequest::column_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.ColumnOperationRequest.column_name)
  return _internal_column_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ColumnOperationRequest::set_column_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.column_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csvservice.ColumnOperationRequest.column_name)
}
inline std::string* ColumnOperationRequest::mutable_column_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_column_name();
  // @@protoc_insertion_point(field_mutable:csvservice.ColumnOperationRequest.column_name)
  return _s;
}
inline const std::string& ColumnOperationRequest::_internal_column_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.column_name_.Get();
}
inline void ColumnOperationRequest::_internal_set_column_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.column_name_.Set(value, GetArena());
}
inline std::string* ColumnOperationRequest::_internal_mutable_column_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.column_name_.Mutable( GetArena());
}
inline std::string* ColumnOperationRequest::release_column_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.ColumnOperationRequest.column_name)
  return _impl_.column_name_.Release();
}
inline void ColumnOperationRequest::set_allocated_column_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.column_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.column_name_.IsDefault()) {
    _impl_.column_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csvservice.ColumnOperationRequest.column_name)
}

// -------------------------------------------------------------------

// NumericResponse

// bool success = 1;
inline void NumericResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool NumericResponse::success() const {
  // @@protoc_insertion_point(field_get:csvservice.NumericResponse.success)
  return _internal_success();
}
inline void NumericResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:csvservice.NumericResponse.success)
}
inline bool NumericResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void NumericResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void NumericResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& NumericResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.NumericResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NumericResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csvservice.NumericResponse.message)
}
inline std::string* NumericResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:csvservice.NumericResponse.message)
  return _s;
}
inline const std::string& NumericResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void NumericResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* NumericResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* NumericResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.NumericResponse.message)
  return _impl_.message_.Release();
}
inline void NumericResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csvservice.NumericResponse.message)
}

// double value = 3;
inline void NumericResponse::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline double NumericResponse::value() const {
  // @@protoc_insertion_point(field_get:csvservice.NumericResponse.value)
  return _internal_value();
}
inline void NumericResponse::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:csvservice.NumericResponse.value)
}
inline double NumericResponse::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void NumericResponse::_internal_set_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// InsertRowRequest

// string filename = 1;
inline void InsertRowRequest::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& InsertRowRequest::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.InsertRowRequest.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InsertRowRequest::set_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csvservice.InsertRowRequest.filename)
}
inline std::string* InsertRowRequest::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:csvservice.InsertRowRequest.filename)
  return _s;
}
inline const std::string& InsertRowRequest::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void InsertRowRequest::_internal_set_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* InsertRowRequest::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* InsertRowRequest::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.InsertRowRequest.filename)
  return _impl_.filename_.Release();
}
inline void InsertRowRequest::set_allocated_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csvservice.InsertRowRequest.filename)
}

// repeated string values = 2;
inline int InsertRowRequest::_internal_values_size() const {
  return _internal_values().size();
}
inline int InsertRowRequest::values_size() const {
  return _internal_values_size();
}
inline void InsertRowRequest::clear_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.values_.Clear();
}
inline std::string* InsertRowRequest::add_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add_mutable:csvservice.InsertRowRequest.values)
  return _s;
}
inline const std::string& InsertRowRequest::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.InsertRowRequest.values)
  return _internal_values().Get(index);
}
inline std::string* InsertRowRequest::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:csvservice.InsertRowRequest.values)
  return _internal_mutable_values()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void InsertRowRequest::set_values(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_values()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:csvservice.InsertRowRequest.values)
}
template <typename Arg_, typename... Args_>
inline void InsertRowRequest::add_values(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_values(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:csvservice.InsertRowRequest.values)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
InsertRowRequest::values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:csvservice.InsertRowRequest.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
InsertRowRequest::mutable_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:csvservice.InsertRowRequest.values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_values();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
InsertRowRequest::_internal_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
InsertRowRequest::_internal_mutable_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// DeleteRowRequest

// string filename = 1;
inline void DeleteRowRequest::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& DeleteRowRequest::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.DeleteRowRequest.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeleteRowRequest::set_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csvservice.DeleteRowRequest.filename)
}
inline std::string* DeleteRowRequest::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:csvservice.DeleteRowRequest.filename)
  return _s;
}
inline const std::string& DeleteRowRequest::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void DeleteRowRequest::_internal_set_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* DeleteRowRequest::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* DeleteRowRequest::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.DeleteRowRequest.filename)
  return _impl_.filename_.Release();
}
inline void DeleteRowRequest::set_allocated_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csvservice.DeleteRowRequest.filename)
}

// int32 row_index = 2;
inline void DeleteRowRequest::clear_row_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.row_index_ = 0;
}
inline ::int32_t DeleteRowRequest::row_index() const {
  // @@protoc_insertion_point(field_get:csvservice.DeleteRowRequest.row_index)
  return _internal_row_index();
}
inline void DeleteRowRequest::set_row_index(::int32_t value) {
  _internal_set_row_index(value);
  // @@protoc_insertion_point(field_set:csvservice.DeleteRowRequest.row_index)
}
inline ::int32_t DeleteRowRequest::_internal_row_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.row_index_;
}
inline void DeleteRowRequest::_internal_set_row_index(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.row_index_ = value;
}

// -------------------------------------------------------------------

// ModificationResponse

// bool success = 1;
inline void ModificationResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool ModificationResponse::success() const {
  // @@protoc_insertion_point(field_get:csvservice.ModificationResponse.success)
  return _internal_success();
}
inline void ModificationResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:csvservice.ModificationResponse.success)
}
inline bool ModificationResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void ModificationResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void ModificationResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ModificationResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.ModificationResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModificationResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csvservice.ModificationResponse.message)
}
inline std::string* ModificationResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:csvservice.ModificationResponse.message)
  return _s;
}
inline const std::string& ModificationResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void ModificationResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* ModificationResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* ModificationResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.ModificationResponse.message)
  return _impl_.message_.Release();
}
inline void ModificationResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csvservice.ModificationResponse.message)
}

// -------------------------------------------------------------------

// ClusterStatusResponse

// bool success = 1;
inline void ClusterStatusResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool ClusterStatusResponse::success() const {
  // @@protoc_insertion_point(field_get:csvservice.ClusterStatusResponse.success)
  return _internal_success();
}
inline void ClusterStatusResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:csvservice.ClusterStatusResponse.success)
}
inline bool ClusterStatusResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void ClusterStatusResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void ClusterStatusResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ClusterStatusResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.ClusterStatusResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClusterStatusResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csvservice.ClusterStatusResponse.message)
}
inline std::string* ClusterStatusResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:csvservice.ClusterStatusResponse.message)
  return _s;
}
inline const std::string& ClusterStatusResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void ClusterStatusResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* ClusterStatusResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* ClusterStatusResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.ClusterStatusResponse.message)
  return _impl_.message_.Release();
}
inline void ClusterStatusResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csvservice.ClusterStatusResponse.message)
}

// string leader_address = 3;
inline void ClusterStatusResponse::clear_leader_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_address_.ClearToEmpty();
}
inline const std::string& ClusterStatusResponse::leader_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.ClusterStatusResponse.leader_address)
  return _internal_leader_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClusterStatusResponse::set_leader_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csvservice.ClusterStatusResponse.leader_address)
}
inline std::string* ClusterStatusResponse::mutable_leader_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_leader_address();
  // @@protoc_insertion_point(field_mutable:csvservice.ClusterStatusResponse.leader_address)
  return _s;
}
inline const std::string& ClusterStatusResponse::_internal_leader_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.leader_address_.Get();
}
inline void ClusterStatusResponse::_internal_set_leader_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_address_.Set(value, GetArena());
}
inline std::string* ClusterStatusResponse::_internal_mutable_leader_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.leader_address_.Mutable( GetArena());
}
inline std::string* ClusterStatusResponse::release_leader_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.ClusterStatusResponse.leader_address)
  return _impl_.leader_address_.Release();
}
inline void ClusterStatusResponse::set_allocated_leader_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.leader_address_.IsDefault()) {
    _impl_.leader_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csvservice.ClusterStatusResponse.leader_address)
}

// repeated string server_addresses = 4;
inline int ClusterStatusResponse::_internal_server_addresses_size() const {
  return _internal_server_addresses().size();
}
inline int ClusterStatusResponse::server_addresses_size() const {
  return _internal_server_addresses_size();
}
inline void ClusterStatusResponse::clear_server_addresses() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_addresses_.Clear();
}
inline std::string* ClusterStatusResponse::add_server_addresses() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_server_addresses()->Add();
  // @@protoc_insertion_point(field_add_mutable:csvservice.ClusterStatusResponse.server_addresses)
  return _s;
}
inline const std::string& ClusterStatusResponse::server_addresses(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.ClusterStatusResponse.server_addresses)
  return _internal_server_addresses().Get(index);
}
inline std::string* ClusterStatusResponse::mutable_server_addresses(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:csvservice.ClusterStatusResponse.server_addresses)
  return _internal_mutable_server_addresses()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ClusterStatusResponse::set_server_addresses(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_server_addresses()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:csvservice.ClusterStatusResponse.server_addresses)
}
template <typename Arg_, typename... Args_>
inline void ClusterStatusResponse::add_server_addresses(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_server_addresses(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:csvservice.ClusterStatusResponse.server_addresses)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ClusterStatusResponse::server_addresses() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:csvservice.ClusterStatusResponse.server_addresses)
  return _internal_server_addresses();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ClusterStatusResponse::mutable_server_addresses() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:csvservice.ClusterStatusResponse.server_addresses)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_server_addresses();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ClusterStatusResponse::_internal_server_addresses() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.server_addresses_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ClusterStatusResponse::_internal_mutable_server_addresses() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.server_addresses_;
}

// int32 active_server_count = 5;
inline void ClusterStatusResponse::clear_active_server_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_server_count_ = 0;
}
inline ::int32_t ClusterStatusResponse::active_server_count() const {
  // @@protoc_insertion_point(field_get:csvservice.ClusterStatusResponse.active_server_count)
  return _internal_active_server_count();
}
inline void ClusterStatusResponse::set_active_server_count(::int32_t value) {
  _internal_set_active_server_count(value);
  // @@protoc_insertion_point(field_set:csvservice.ClusterStatusResponse.active_server_count)
}
inline ::int32_t ClusterStatusResponse::_internal_active_server_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.active_server_count_;
}
inline void ClusterStatusResponse::_internal_set_active_server_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_server_count_ = value;
}

// -------------------------------------------------------------------

// RegisterPeerRequest

// string peer_address = 1;
inline void RegisterPeerRequest::clear_peer_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.peer_address_.ClearToEmpty();
}
inline const std::string& RegisterPeerRequest::peer_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.RegisterPeerRequest.peer_address)
  return _internal_peer_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterPeerRequest::set_peer_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.peer_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csvservice.RegisterPeerRequest.peer_address)
}
inline std::string* RegisterPeerRequest::mutable_peer_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_peer_address();
  // @@protoc_insertion_point(field_mutable:csvservice.RegisterPeerRequest.peer_address)
  return _s;
}
inline const std::string& RegisterPeerRequest::_internal_peer_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.peer_address_.Get();
}
inline void RegisterPeerRequest::_internal_set_peer_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.peer_address_.Set(value, GetArena());
}
inline std::string* RegisterPeerRequest::_internal_mutable_peer_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.peer_address_.Mutable( GetArena());
}
inline std::string* RegisterPeerRequest::release_peer_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.RegisterPeerRequest.peer_address)
  return _impl_.peer_address_.Release();
}
inline void RegisterPeerRequest::set_allocated_peer_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.peer_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.peer_address_.IsDefault()) {
    _impl_.peer_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csvservice.RegisterPeerRequest.peer_address)
}

// -------------------------------------------------------------------

// RegisterPeerResponse

// bool success = 1;
inline void RegisterPeerResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool RegisterPeerResponse::success() const {
  // @@protoc_insertion_point(field_get:csvservice.RegisterPeerResponse.success)
  return _internal_success();
}
inline void RegisterPeerResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:csvservice.RegisterPeerResponse.success)
}
inline bool RegisterPeerResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void RegisterPeerResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void RegisterPeerResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& RegisterPeerResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.RegisterPeerResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterPeerResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csvservice.RegisterPeerResponse.message)
}
inline std::string* RegisterPeerResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:csvservice.RegisterPeerResponse.message)
  return _s;
}
inline const std::string& RegisterPeerResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void RegisterPeerResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* RegisterPeerResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* RegisterPeerResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.RegisterPeerResponse.message)
  return _impl_.message_.Release();
}
inline void RegisterPeerResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csvservice.RegisterPeerResponse.message)
}

// string leader_address = 3;
inline void RegisterPeerResponse::clear_leader_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_address_.ClearToEmpty();
}
inline const std::string& RegisterPeerResponse::leader_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.RegisterPeerResponse.leader_address)
  return _internal_leader_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterPeerResponse::set_leader_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csvservice.RegisterPeerResponse.leader_address)
}
inline std::string* RegisterPeerResponse::mutable_leader_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_leader_address();
  // @@protoc_insertion_point(field_mutable:csvservice.RegisterPeerResponse.leader_address)
  return _s;
}
inline const std::string& RegisterPeerResponse::_internal_leader_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.leader_address_.Get();
}
inline void RegisterPeerResponse::_internal_set_leader_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_address_.Set(value, GetArena());
}
inline std::string* RegisterPeerResponse::_internal_mutable_leader_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.leader_address_.Mutable( GetArena());
}
inline std::string* RegisterPeerResponse::release_leader_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.RegisterPeerResponse.leader_address)
  return _impl_.leader_address_.Release();
}
inline void RegisterPeerResponse::set_allocated_leader_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.leader_address_.IsDefault()) {
    _impl_.leader_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csvservice.RegisterPeerResponse.leader_address)
}

// -------------------------------------------------------------------

// HeartbeatRequest

// string server_address = 1;
inline void HeartbeatRequest::clear_server_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_address_.ClearToEmpty();
}
inline const std::string& HeartbeatRequest::server_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.HeartbeatRequest.server_address)
  return _internal_server_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HeartbeatRequest::set_server_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csvservice.HeartbeatRequest.server_address)
}
inline std::string* HeartbeatRequest::mutable_server_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_server_address();
  // @@protoc_insertion_point(field_mutable:csvservice.HeartbeatRequest.server_address)
  return _s;
}
inline const std::string& HeartbeatRequest::_internal_server_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.server_address_.Get();
}
inline void HeartbeatRequest::_internal_set_server_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_address_.Set(value, GetArena());
}
inline std::string* HeartbeatRequest::_internal_mutable_server_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.server_address_.Mutable( GetArena());
}
inline std::string* HeartbeatRequest::release_server_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.HeartbeatRequest.server_address)
  return _impl_.server_address_.Release();
}
inline void HeartbeatRequest::set_allocated_server_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.server_address_.IsDefault()) {
    _impl_.server_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csvservice.HeartbeatRequest.server_address)
}

// bool is_leader = 2;
inline void HeartbeatRequest::clear_is_leader() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_leader_ = false;
}
inline bool HeartbeatRequest::is_leader() const {
  // @@protoc_insertion_point(field_get:csvservice.HeartbeatRequest.is_leader)
  return _internal_is_leader();
}
inline void HeartbeatRequest::set_is_leader(bool value) {
  _internal_set_is_leader(value);
  // @@protoc_insertion_point(field_set:csvservice.HeartbeatRequest.is_leader)
}
inline bool HeartbeatRequest::_internal_is_leader() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_leader_;
}
inline void HeartbeatRequest::_internal_set_is_leader(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_leader_ = value;
}

// -------------------------------------------------------------------

// HeartbeatResponse

// bool success = 1;
inline void HeartbeatResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool HeartbeatResponse::success() const {
  // @@protoc_insertion_point(field_get:csvservice.HeartbeatResponse.success)
  return _internal_success();
}
inline void HeartbeatResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:csvservice.HeartbeatResponse.success)
}
inline bool HeartbeatResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void HeartbeatResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string leader_address = 2;
inline void HeartbeatResponse::clear_leader_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_address_.ClearToEmpty();
}
inline const std::string& HeartbeatResponse::leader_address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.HeartbeatResponse.leader_address)
  return _internal_leader_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HeartbeatResponse::set_leader_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csvservice.HeartbeatResponse.leader_address)
}
inline std::string* HeartbeatResponse::mutable_leader_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_leader_address();
  // @@protoc_insertion_point(field_mutable:csvservice.HeartbeatResponse.leader_address)
  return _s;
}
inline const std::string& HeartbeatResponse::_internal_leader_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.leader_address_.Get();
}
inline void HeartbeatResponse::_internal_set_leader_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_address_.Set(value, GetArena());
}
inline std::string* HeartbeatResponse::_internal_mutable_leader_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.leader_address_.Mutable( GetArena());
}
inline std::string* HeartbeatResponse::release_leader_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.HeartbeatResponse.leader_address)
  return _impl_.leader_address_.Release();
}
inline void HeartbeatResponse::set_allocated_leader_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.leader_address_.IsDefault()) {
    _impl_.leader_address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csvservice.HeartbeatResponse.leader_address)
}

// -------------------------------------------------------------------

// ReplicateUploadResponse

// bool success = 1;
inline void ReplicateUploadResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool ReplicateUploadResponse::success() const {
  // @@protoc_insertion_point(field_get:csvservice.ReplicateUploadResponse.success)
  return _internal_success();
}
inline void ReplicateUploadResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:csvservice.ReplicateUploadResponse.success)
}
inline bool ReplicateUploadResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void ReplicateUploadResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void ReplicateUploadResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ReplicateUploadResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.ReplicateUploadResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReplicateUploadResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csvservice.ReplicateUploadResponse.message)
}
inline std::string* ReplicateUploadResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:csvservice.ReplicateUploadResponse.message)
  return _s;
}
inline const std::string& ReplicateUploadResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void ReplicateUploadResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* ReplicateUploadResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* ReplicateUploadResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.ReplicateUploadResponse.message)
  return _impl_.message_.Release();
}
inline void ReplicateUploadResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csvservice.ReplicateUploadResponse.message)
}

// -------------------------------------------------------------------

// ReplicateMutationRequest

// string filename = 1;
inline void ReplicateMutationRequest::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& ReplicateMutationRequest::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.ReplicateMutationRequest.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReplicateMutationRequest::set_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csvservice.ReplicateMutationRequest.filename)
}
inline std::string* ReplicateMutationRequest::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:csvservice.ReplicateMutationRequest.filename)
  return _s;
}
inline const std::string& ReplicateMutationRequest::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void ReplicateMutationRequest::_internal_set_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* ReplicateMutationRequest::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* ReplicateMutationRequest::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.ReplicateMutationRequest.filename)
  return _impl_.filename_.Release();
}
inline void ReplicateMutationRequest::set_allocated_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csvservice.ReplicateMutationRequest.filename)
}

// .csvservice.RowInsertMutation row_insert = 2;
inline bool ReplicateMutationRequest::has_row_insert() const {
  return mutation_type_case() == kRowInsert;
}
inline bool ReplicateMutationRequest::_internal_has_row_insert() const {
  return mutation_type_case() == kRowInsert;
}
inline void ReplicateMutationRequest::set_has_row_insert() {
  _impl_._oneof_case_[0] = kRowInsert;
}
inline void ReplicateMutationRequest::clear_row_insert() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (mutation_type_case() == kRowInsert) {
    if (GetArena() == nullptr) {
      delete _impl_.mutation_type_.row_insert_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mutation_type_.row_insert_);
    }
    clear_has_mutation_type();
  }
}
inline ::csvservice::RowInsertMutation* ReplicateMutationRequest::release_row_insert() {
  // @@protoc_insertion_point(field_release:csvservice.ReplicateMutationRequest.row_insert)
  if (mutation_type_case() == kRowInsert) {
    clear_has_mutation_type();
    auto* temp = _impl_.mutation_type_.row_insert_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.mutation_type_.row_insert_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::csvservice::RowInsertMutation& ReplicateMutationRequest::_internal_row_insert() const {
  return mutation_type_case() == kRowInsert ? *_impl_.mutation_type_.row_insert_ : reinterpret_cast<::csvservice::RowInsertMutation&>(::csvservice::_RowInsertMutation_default_instance_);
}
inline const ::csvservice::RowInsertMutation& ReplicateMutationRequest::row_insert() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.ReplicateMutationRequest.row_insert)
  return _internal_row_insert();
}
inline ::csvservice::RowInsertMutation* ReplicateMutationRequest::unsafe_arena_release_row_insert() {
  // @@protoc_insertion_point(field_unsafe_arena_release:csvservice.ReplicateMutationRequest.row_insert)
  if (mutation_type_case() == kRowInsert) {
    clear_has_mutation_type();
    auto* temp = _impl_.mutation_type_.row_insert_;
    _impl_.mutation_type_.row_insert_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplicateMutationRequest::unsafe_arena_set_allocated_row_insert(::csvservice::RowInsertMutation* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_mutation_type();
  if (value) {
    set_has_row_insert();
    _impl_.mutation_type_.row_insert_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:csvservice.ReplicateMutationRequest.row_insert)
}
inline ::csvservice::RowInsertMutation* ReplicateMutationRequest::_internal_mutable_row_insert() {
  if (mutation_type_case() != kRowInsert) {
    clear_mutation_type();
    set_has_row_insert();
    _impl_.mutation_type_.row_insert_ =
        ::google::protobuf::Message::DefaultConstruct<::csvservice::RowInsertMutation>(GetArena());
  }
  return _impl_.mutation_type_.row_insert_;
}
inline ::csvservice::RowInsertMutation* ReplicateMutationRequest::mutable_row_insert() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::csvservice::RowInsertMutation* _msg = _internal_mutable_row_insert();
  // @@protoc_insertion_point(field_mutable:csvservice.ReplicateMutationRequest.row_insert)
  return _msg;
}

// .csvservice.RowDeleteMutation row_delete = 3;
inline bool ReplicateMutationRequest::has_row_delete() const {
  return mutation_type_case() == kRowDelete;
}
inline bool ReplicateMutationRequest::_internal_has_row_delete() const {
  return mutation_type_case() == kRowDelete;
}
inline void ReplicateMutationRequest::set_has_row_delete() {
  _impl_._oneof_case_[0] = kRowDelete;
}
inline void ReplicateMutationRequest::clear_row_delete() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (mutation_type_case() == kRowDelete) {
    if (GetArena() == nullptr) {
      delete _impl_.mutation_type_.row_delete_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mutation_type_.row_delete_);
    }
    clear_has_mutation_type();
  }
}
inline ::csvservice::RowDeleteMutation* ReplicateMutationRequest::release_row_delete() {
  // @@protoc_insertion_point(field_release:csvservice.ReplicateMutationRequest.row_delete)
  if (mutation_type_case() == kRowDelete) {
    clear_has_mutation_type();
    auto* temp = _impl_.mutation_type_.row_delete_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.mutation_type_.row_delete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::csvservice::RowDeleteMutation& ReplicateMutationRequest::_internal_row_delete() const {
  return mutation_type_case() == kRowDelete ? *_impl_.mutation_type_.row_delete_ : reinterpret_cast<::csvservice::RowDeleteMutation&>(::csvservice::_RowDeleteMutation_default_instance_);
}
inline const ::csvservice::RowDeleteMutation& ReplicateMutationRequest::row_delete() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.ReplicateMutationRequest.row_delete)
  return _internal_row_delete();
}
inline ::csvservice::RowDeleteMutation* ReplicateMutationRequest::unsafe_arena_release_row_delete() {
  // @@protoc_insertion_point(field_unsafe_arena_release:csvservice.ReplicateMutationRequest.row_delete)
  if (mutation_type_case() == kRowDelete) {
    clear_has_mutation_type();
    auto* temp = _impl_.mutation_type_.row_delete_;
    _impl_.mutation_type_.row_delete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReplicateMutationRequest::unsafe_arena_set_allocated_row_delete(::csvservice::RowDeleteMutation* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_mutation_type();
  if (value) {
    set_has_row_delete();
    _impl_.mutation_type_.row_delete_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:csvservice.ReplicateMutationRequest.row_delete)
}
inline ::csvservice::RowDeleteMutation* ReplicateMutationRequest::_internal_mutable_row_delete() {
  if (mutation_type_case() != kRowDelete) {
    clear_mutation_type();
    set_has_row_delete();
    _impl_.mutation_type_.row_delete_ =
        ::google::protobuf::Message::DefaultConstruct<::csvservice::RowDeleteMutation>(GetArena());
  }
  return _impl_.mutation_type_.row_delete_;
}
inline ::csvservice::RowDeleteMutation* ReplicateMutationRequest::mutable_row_delete() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::csvservice::RowDeleteMutation* _msg = _internal_mutable_row_delete();
  // @@protoc_insertion_point(field_mutable:csvservice.ReplicateMutationRequest.row_delete)
  return _msg;
}

inline bool ReplicateMutationRequest::has_mutation_type() const {
  return mutation_type_case() != MUTATION_TYPE_NOT_SET;
}
inline void ReplicateMutationRequest::clear_has_mutation_type() {
  _impl_._oneof_case_[0] = MUTATION_TYPE_NOT_SET;
}
inline ReplicateMutationRequest::MutationTypeCase ReplicateMutationRequest::mutation_type_case() const {
  return ReplicateMutationRequest::MutationTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// RowInsertMutation

// repeated string values = 1;
inline int RowInsertMutation::_internal_values_size() const {
  return _internal_values().size();
}
inline int RowInsertMutation::values_size() const {
  return _internal_values_size();
}
inline void RowInsertMutation::clear_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.values_.Clear();
}
inline std::string* RowInsertMutation::add_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add_mutable:csvservice.RowInsertMutation.values)
  return _s;
}
inline const std::string& RowInsertMutation::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.RowInsertMutation.values)
  return _internal_values().Get(index);
}
inline std::string* RowInsertMutation::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:csvservice.RowInsertMutation.values)
  return _internal_mutable_values()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void RowInsertMutation::set_values(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_values()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:csvservice.RowInsertMutation.values)
}
template <typename Arg_, typename... Args_>
inline void RowInsertMutation::add_values(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_values(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:csvservice.RowInsertMutation.values)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RowInsertMutation::values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:csvservice.RowInsertMutation.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RowInsertMutation::mutable_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:csvservice.RowInsertMutation.values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_values();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RowInsertMutation::_internal_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RowInsertMutation::_internal_mutable_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// RowDeleteMutation

// int32 row_index = 1;
inline void RowDeleteMutation::clear_row_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.row_index_ = 0;
}
inline ::int32_t RowDeleteMutation::row_index() const {
  // @@protoc_insertion_point(field_get:csvservice.RowDeleteMutation.row_index)
  return _internal_row_index();
}
inline void RowDeleteMutation::set_row_index(::int32_t value) {
  _internal_set_row_index(value);
  // @@protoc_insertion_point(field_set:csvservice.RowDeleteMutation.row_index)
}
inline ::int32_t RowDeleteMutation::_internal_row_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.row_index_;
}
inline void RowDeleteMutation::_internal_set_row_index(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.row_index_ = value;
}

// -------------------------------------------------------------------

// ReplicateMutationResponse

// bool success = 1;
inline void ReplicateMutationResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool ReplicateMutationResponse::success() const {
  // @@protoc_insertion_point(field_get:csvservice.ReplicateMutationResponse.success)
  return _internal_success();
}
inline void ReplicateMutationResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:csvservice.ReplicateMutationResponse.success)
}
inline bool ReplicateMutationResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void ReplicateMutationResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void ReplicateMutationResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ReplicateMutationResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.ReplicateMutationResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReplicateMutationResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csvservice.ReplicateMutationResponse.message)
}
inline std::string* ReplicateMutationResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:csvservice.ReplicateMutationResponse.message)
  return _s;
}
inline const std::string& ReplicateMutationResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void ReplicateMutationResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* ReplicateMutationResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* ReplicateMutationResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.ReplicateMutationResponse.message)
  return _impl_.message_.Release();
}
inline void ReplicateMutationResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csvservice.ReplicateMutationResponse.message)
}

// -------------------------------------------------------------------

// AppendEntriesRequest

// uint64 term = 1;
inline void AppendEntriesRequest::clear_term() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.term_ = ::uint64_t{0u};
}
inline ::uint64_t AppendEntriesRequest::term() const {
  // @@protoc_insertion_point(field_get:csvservice.AppendEntriesRequest.term)
  return _internal_term();
}
inline void AppendEntriesRequest::set_term(::uint64_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:csvservice.AppendEntriesRequest.term)
}
inline ::uint64_t AppendEntriesRequest::_internal_term() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.term_;
}
inline void AppendEntriesRequest::_internal_set_term(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.term_ = value;
}

// string leader_id = 2;
inline void AppendEntriesRequest::clear_leader_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_id_.ClearToEmpty();
}
inline const std::string& AppendEntriesRequest::leader_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.AppendEntriesRequest.leader_id)
  return _internal_leader_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AppendEntriesRequest::set_leader_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csvservice.AppendEntriesRequest.leader_id)
}
inline std::string* AppendEntriesRequest::mutable_leader_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_leader_id();
  // @@protoc_insertion_point(field_mutable:csvservice.AppendEntriesRequest.leader_id)
  return _s;
}
inline const std::string& AppendEntriesRequest::_internal_leader_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.leader_id_.Get();
}
inline void AppendEntriesRequest::_internal_set_leader_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_id_.Set(value, GetArena());
}
inline std::string* AppendEntriesRequest::_internal_mutable_leader_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.leader_id_.Mutable( GetArena());
}
inline std::string* AppendEntriesRequest::release_leader_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.AppendEntriesRequest.leader_id)
  return _impl_.leader_id_.Release();
}
inline void AppendEntriesRequest::set_allocated_leader_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.leader_id_.IsDefault()) {
    _impl_.leader_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csvservice.AppendEntriesRequest.leader_id)
}

// uint64 prev_log_index = 3;
inline void AppendEntriesRequest::clear_prev_log_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prev_log_index_ = ::uint64_t{0u};
}
inline ::uint64_t AppendEntriesRequest::prev_log_index() const {
  // @@protoc_insertion_point(field_get:csvservice.AppendEntriesRequest.prev_log_index)
  return _internal_prev_log_index();
}
inline void AppendEntriesRequest::set_prev_log_index(::uint64_t value) {
  _internal_set_prev_log_index(value);
  // @@protoc_insertion_point(field_set:csvservice.AppendEntriesRequest.prev_log_index)
}
inline ::uint64_t AppendEntriesRequest::_internal_prev_log_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.prev_log_index_;
}
inline void AppendEntriesRequest::_internal_set_prev_log_index(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prev_log_index_ = value;
}

// uint64 prev_log_term = 4;
inline void AppendEntriesRequest::clear_prev_log_term() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prev_log_term_ = ::uint64_t{0u};
}
inline ::uint64_t AppendEntriesRequest::prev_log_term() const {
  // @@protoc_insertion_point(field_get:csvservice.AppendEntriesRequest.prev_log_term)
  return _internal_prev_log_term();
}
inline void AppendEntriesRequest::set_prev_log_term(::uint64_t value) {
  _internal_set_prev_log_term(value);
  // @@protoc_insertion_point(field_set:csvservice.AppendEntriesRequest.prev_log_term)
}
inline ::uint64_t AppendEntriesRequest::_internal_prev_log_term() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.prev_log_term_;
}
inline void AppendEntriesRequest::_internal_set_prev_log_term(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prev_log_term_ = value;
}

// repeated .csvservice.LogEntry entries = 5;
inline int AppendEntriesRequest::_internal_entries_size() const {
  return _internal_entries().size();
}
inline int AppendEntriesRequest::entries_size() const {
  return _internal_entries_size();
}
inline void AppendEntriesRequest::clear_entries() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entries_.Clear();
}
inline ::csvservice::LogEntry* AppendEntriesRequest::mutable_entries(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:csvservice.AppendEntriesRequest.entries)
  return _internal_mutable_entries()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::csvservice::LogEntry>* AppendEntriesRequest::mutable_entries()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:csvservice.AppendEntriesRequest.entries)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_entries();
}
inline const ::csvservice::LogEntry& AppendEntriesRequest::entries(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.AppendEntriesRequest.entries)
  return _internal_entries().Get(index);
}
inline ::csvservice::LogEntry* AppendEntriesRequest::add_entries() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::csvservice::LogEntry* _add = _internal_mutable_entries()->Add();
  // @@protoc_insertion_point(field_add:csvservice.AppendEntriesRequest.entries)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::csvservice::LogEntry>& AppendEntriesRequest::entries() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:csvservice.AppendEntriesRequest.entries)
  return _internal_entries();
}
inline const ::google::protobuf::RepeatedPtrField<::csvservice::LogEntry>&
AppendEntriesRequest::_internal_entries() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entries_;
}
inline ::google::protobuf::RepeatedPtrField<::csvservice::LogEntry>*
AppendEntriesRequest::_internal_mutable_entries() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.entries_;
}

// uint64 leader_commit = 6;
inline void AppendEntriesRequest::clear_leader_commit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_commit_ = ::uint64_t{0u};
}
inline ::uint64_t AppendEntriesRequest::leader_commit() const {
  // @@protoc_insertion_point(field_get:csvservice.AppendEntriesRequest.leader_commit)
  return _internal_leader_commit();
}
inline void AppendEntriesRequest::set_leader_commit(::uint64_t value) {
  _internal_set_leader_commit(value);
  // @@protoc_insertion_point(field_set:csvservice.AppendEntriesRequest.leader_commit)
}
inline ::uint64_t AppendEntriesRequest::_internal_leader_commit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.leader_commit_;
}
inline void AppendEntriesRequest::_internal_set_leader_commit(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leader_commit_ = value;
}

// -------------------------------------------------------------------

// LogEntry

// uint64 term = 1;
inline void LogEntry::clear_term() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.term_ = ::uint64_t{0u};
}
inline ::uint64_t LogEntry::term() const {
  // @@protoc_insertion_point(field_get:csvservice.LogEntry.term)
  return _internal_term();
}
inline void LogEntry::set_term(::uint64_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:csvservice.LogEntry.term)
}
inline ::uint64_t LogEntry::_internal_term() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.term_;
}
inline void LogEntry::_internal_set_term(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.term_ = value;
}

// .csvservice.ReplicateMutationRequest mutation = 2;
inline bool LogEntry::has_mutation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mutation_ != nullptr);
  return value;
}
inline void LogEntry::clear_mutation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.mutation_ != nullptr) _impl_.mutation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::csvservice::ReplicateMutationRequest& LogEntry::_internal_mutation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::csvservice::ReplicateMutationRequest* p = _impl_.mutation_;
  return p != nullptr ? *p : reinterpret_cast<const ::csvservice::ReplicateMutationRequest&>(::csvservice::_ReplicateMutationRequest_default_instance_);
}
inline const ::csvservice::ReplicateMutationRequest& LogEntry::mutation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.LogEntry.mutation)
  return _internal_mutation();
}
inline void LogEntry::unsafe_arena_set_allocated_mutation(::csvservice::ReplicateMutationRequest* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.mutation_);
  }
  _impl_.mutation_ = reinterpret_cast<::csvservice::ReplicateMutationRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:csvservice.LogEntry.mutation)
}
inline ::csvservice::ReplicateMutationRequest* LogEntry::release_mutation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::csvservice::ReplicateMutationRequest* released = _impl_.mutation_;
  _impl_.mutation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::csvservice::ReplicateMutationRequest* LogEntry::unsafe_arena_release_mutation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.LogEntry.mutation)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::csvservice::ReplicateMutationRequest* temp = _impl_.mutation_;
  _impl_.mutation_ = nullptr;
  return temp;
}
inline ::csvservice::ReplicateMutationRequest* LogEntry::_internal_mutable_mutation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.mutation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::csvservice::ReplicateMutationRequest>(GetArena());
    _impl_.mutation_ = reinterpret_cast<::csvservice::ReplicateMutationRequest*>(p);
  }
  return _impl_.mutation_;
}
inline ::csvservice::ReplicateMutationRequest* LogEntry::mutable_mutation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::csvservice::ReplicateMutationRequest* _msg = _internal_mutable_mutation();
  // @@protoc_insertion_point(field_mutable:csvservice.LogEntry.mutation)
  return _msg;
}
inline void LogEntry::set_allocated_mutation(::csvservice::ReplicateMutationRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.mutation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.mutation_ = reinterpret_cast<::csvservice::ReplicateMutationRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:csvservice.LogEntry.mutation)
}

// -------------------------------------------------------------------

// AppendEntriesResponse

// uint64 term = 1;
inline void AppendEntriesResponse::clear_term() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.term_ = ::uint64_t{0u};
}
inline ::uint64_t AppendEntriesResponse::term() const {
  // @@protoc_insertion_point(field_get:csvservice.AppendEntriesResponse.term)
  return _internal_term();
}
inline void AppendEntriesResponse::set_term(::uint64_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:csvservice.AppendEntriesResponse.term)
}
inline ::uint64_t AppendEntriesResponse::_internal_term() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.term_;
}
inline void AppendEntriesResponse::_internal_set_term(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.term_ = value;
}

// bool success = 2;
inline void AppendEntriesResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool AppendEntriesResponse::success() const {
  // @@protoc_insertion_point(field_get:csvservice.AppendEntriesResponse.success)
  return _internal_success();
}
inline void AppendEntriesResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:csvservice.AppendEntriesResponse.success)
}
inline bool AppendEntriesResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void AppendEntriesResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// uint64 conflict_index = 3;
inline void AppendEntriesResponse::clear_conflict_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conflict_index_ = ::uint64_t{0u};
}
inline ::uint64_t AppendEntriesResponse::conflict_index() const {
  // @@protoc_insertion_point(field_get:csvservice.AppendEntriesResponse.conflict_index)
  return _internal_conflict_index();
}
inline void AppendEntriesResponse::set_conflict_index(::uint64_t value) {
  _internal_set_conflict_index(value);
  // @@protoc_insertion_point(field_set:csvservice.AppendEntriesResponse.conflict_index)
}
inline ::uint64_t AppendEntriesResponse::_internal_conflict_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conflict_index_;
}
inline void AppendEntriesResponse::_internal_set_conflict_index(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conflict_index_ = value;
}

// uint64 conflict_term = 4;
inline void AppendEntriesResponse::clear_conflict_term() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conflict_term_ = ::uint64_t{0u};
}
inline ::uint64_t AppendEntriesResponse::conflict_term() const {
  // @@protoc_insertion_point(field_get:csvservice.AppendEntriesResponse.conflict_term)
  return _internal_conflict_term();
}
inline void AppendEntriesResponse::set_conflict_term(::uint64_t value) {
  _internal_set_conflict_term(value);
  // @@protoc_insertion_point(field_set:csvservice.AppendEntriesResponse.conflict_term)
}
inline ::uint64_t AppendEntriesResponse::_internal_conflict_term() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conflict_term_;
}
inline void AppendEntriesResponse::_internal_set_conflict_term(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conflict_term_ = value;
}

// -------------------------------------------------------------------

// RequestVoteRequest

// uint64 term = 1;
inline void RequestVoteRequest::clear_term() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.term_ = ::uint64_t{0u};
}
inline ::uint64_t RequestVoteRequest::term() const {
  // @@protoc_insertion_point(field_get:csvservice.RequestVoteRequest.term)
  return _internal_term();
}
inline void RequestVoteRequest::set_term(::uint64_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:csvservice.RequestVoteRequest.term)
}
inline ::uint64_t RequestVoteRequest::_internal_term() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.term_;
}
inline void RequestVoteRequest::_internal_set_term(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.term_ = value;
}

// string candidate_id = 2;
inline void RequestVoteRequest::clear_candidate_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.candidate_id_.ClearToEmpty();
}
inline const std::string& RequestVoteRequest::candidate_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:csvservice.RequestVoteRequest.candidate_id)
  return _internal_candidate_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestVoteRequest::set_candidate_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.candidate_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:csvservice.RequestVoteRequest.candidate_id)
}
inline std::string* RequestVoteRequest::mutable_candidate_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_candidate_id();
  // @@protoc_insertion_point(field_mutable:csvservice.RequestVoteRequest.candidate_id)
  return _s;
}
inline const std::string& RequestVoteRequest::_internal_candidate_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.candidate_id_.Get();
}
inline void RequestVoteRequest::_internal_set_candidate_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.candidate_id_.Set(value, GetArena());
}
inline std::string* RequestVoteRequest::_internal_mutable_candidate_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.candidate_id_.Mutable( GetArena());
}
inline std::string* RequestVoteRequest::release_candidate_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:csvservice.RequestVoteRequest.candidate_id)
  return _impl_.candidate_id_.Release();
}
inline void RequestVoteRequest::set_allocated_candidate_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.candidate_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.candidate_id_.IsDefault()) {
    _impl_.candidate_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:csvservice.RequestVoteRequest.candidate_id)
}

// uint64 last_log_index = 3;
inline void RequestVoteRequest::clear_last_log_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_log_index_ = ::uint64_t{0u};
}
inline ::uint64_t RequestVoteRequest::last_log_index() const {
  // @@protoc_insertion_point(field_get:csvservice.RequestVoteRequest.last_log_index)
  return _internal_last_log_index();
}
inline void RequestVoteRequest::set_last_log_index(::uint64_t value) {
  _internal_set_last_log_index(value);
  // @@protoc_insertion_point(field_set:csvservice.RequestVoteRequest.last_log_index)
}
inline ::uint64_t RequestVoteRequest::_internal_last_log_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_log_index_;
}
inline void RequestVoteRequest::_internal_set_last_log_index(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_log_index_ = value;
}

// uint64 last_log_term = 4;
inline void RequestVoteRequest::clear_last_log_term() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_log_term_ = ::uint64_t{0u};
}
inline ::uint64_t RequestVoteRequest::last_log_term() const {
  // @@protoc_insertion_point(field_get:csvservice.RequestVoteRequest.last_log_term)
  return _internal_last_log_term();
}
inline void RequestVoteRequest::set_last_log_term(::uint64_t value) {
  _internal_set_last_log_term(value);
  // @@protoc_insertion_point(field_set:csvservice.RequestVoteRequest.last_log_term)
}
inline ::uint64_t RequestVoteRequest::_internal_last_log_term() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_log_term_;
}
inline void RequestVoteRequest::_internal_set_last_log_term(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_log_term_ = value;
}

// -------------------------------------------------------------------

// RequestVoteResponse

// uint64 term = 1;
inline void RequestVoteResponse::clear_term() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.term_ = ::uint64_t{0u};
}
inline ::uint64_t RequestVoteResponse::term() const {
  // @@protoc_insertion_point(field_get:csvservice.RequestVoteResponse.term)
  return _internal_term();
}
inline void RequestVoteResponse::set_term(::uint64_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:csvservice.RequestVoteResponse.term)
}
inline ::uint64_t RequestVoteResponse::_internal_term() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.term_;
}
inline void RequestVoteResponse::_internal_set_term(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.term_ = value;
}

// bool vote_granted = 2;
inline void RequestVoteResponse::clear_vote_granted() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vote_granted_ = false;
}
inline bool RequestVoteResponse::vote_granted() const {
  // @@protoc_insertion_point(field_get:csvservice.RequestVoteResponse.vote_granted)
  return _internal_vote_granted();
}
inline void RequestVoteResponse::set_vote_granted(bool value) {
  _internal_set_vote_granted(value);
  // @@protoc_insertion_point(field_set:csvservice.RequestVoteResponse.vote_granted)
}
inline bool RequestVoteResponse::_internal_vote_granted() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vote_granted_;
}
inline void RequestVoteResponse::_internal_set_vote_granted(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vote_granted_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace csvservice


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // proto_2fcsv_5fservice_2eproto_2epb_2eh
