syntax = "proto3";

package raft;

import "proto/mutation.proto";

// LogEntry: A single entry in the Raft log
message LogEntry {
    int64 term = 1;           // Term when entry was created
    mutation.Mutation cmd = 2; // Command to be applied to state machine
}

// AppendEntries RPC Arguments
message AppendEntriesRequest {
    int64 term = 1;               // Leader's term
    string leader_id = 2;         // Leader's ID so followers can redirect clients
    int64 prev_log_index = 3;     // Index of log entry immediately preceding new ones
    int64 prev_log_term = 4;      // Term of prev_log_index entry
    repeated LogEntry entries = 5; // Log entries to store (empty for heartbeat)
    int64 leader_commit = 6;      // Leader's commit index
}

// AppendEntries RPC Response
message AppendEntriesResponse {
    int64 term = 1;           // Current term, for leader to update itself
    bool success = 2;         // True if follower contained entry matching prev_log_index/term
    int64 conflict_index = 3; // First index it stores for conflict_term
    int64 conflict_term = 4;  // Term of conflicting entry (0 if no conflict)
}

// RequestVote RPC Arguments
message RequestVoteRequest {
    int64 term = 1;           // Candidate's term
    string candidate_id = 2;  // Candidate requesting vote
    int64 last_log_index = 3; // Index of candidate's last log entry
    int64 last_log_term = 4;  // Term of candidate's last log entry
}

// RequestVote RPC Response
message RequestVoteResponse {
    int64 term = 1;        // Current term, for candidate to update itself
    bool vote_granted = 2; // True means candidate received vote
}

// RaftService: gRPC service for Raft consensus protocol
service RaftService {
    // AppendEntries RPC: Used for log replication and as heartbeat
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse) {}
    
    // RequestVote RPC: Used by candidates to gather votes
    rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse) {}
}
